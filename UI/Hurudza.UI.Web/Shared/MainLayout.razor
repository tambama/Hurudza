@inherits LayoutComponentBase
@using Hurudza.UI.Web.Services
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime
@inject SidebarToggleService SidebarToggleService

<div class="g-sidenav-show bg-gray-100">
    @if (!IsLoginPage)
    {
        <NavMenu/>
    }
    <main class="@(IsLoginPage ? "" : "main-content position-relative max-height-vh-100 h-100 border-radius-lg")">
        @if (!IsLoginPage)
        {
            <NavBar/>
        }
        
        <div class="@(IsLoginPage ? "" : "container-fluid py-4")">
            @if (IsLoginPage)
            {
                @Body
            }
            else
            {
                <AuthorizeView>
                    <Authorized>
                        @Body
                    </Authorized>
                    <NotAuthorized>
                        @if (IsProcessingAuth)
                        {
                            <div class="row">
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-body text-center">
                                            <h3>Checking authentication...</h3>
                                            <div class="spinner-border text-primary mt-3" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <RedirectToLogin />
                        }
                    </NotAuthorized>
                </AuthorizeView>
            }
        </div>
    </main>
</div>

@code {
    private bool IsProcessingAuth { get; set; } = true;
    private bool IsLoginPage => Navigation.Uri.Contains("/authentication/login") || 
                               Navigation.Uri.Contains("/register");
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"MainLayout initialized, IsLoginPage: {IsLoginPage}");
        
        // Initialize JS sidebar functions if not on login page
        if (!IsLoginPage)
        {
            await SidebarToggleService.InitializeJs();
        }
        
        // If we're on the login page, skip authentication checks
        if (IsLoginPage)
        {
            IsProcessingAuth = false;
            return;
        }
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        if (string.IsNullOrEmpty(token))
        {
            // If no token is present, redirect to login
            Console.WriteLine("No token found in MainLayout");
            
            // Allow App.razor to handle the redirect
            IsProcessingAuth = false;
            return;
        }
        
        // Token exists, check if user is authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            // We have a token but no authenticated user
            Console.WriteLine("Token exists but user not authenticated in MainLayout");
            
            // Allow App.razor's OnNavigateAsync to handle authentication
            IsProcessingAuth = true;
            
            // Short wait to allow OnNavigateAsync to complete its authentication attempt
            await Task.Delay(500);
            
            // Check again
            authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                // Still not authenticated, allow RedirectToLogin to handle it
                Console.WriteLine("Still not authenticated after waiting");
                IsProcessingAuth = false;
            }
            else
            {
                // Successfully authenticated
                Console.WriteLine("Successfully authenticated after waiting");
                IsProcessingAuth = false;
            }
        }
        else
        {
            // Already authenticated
            Console.WriteLine("User already authenticated in MainLayout");
            IsProcessingAuth = false;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsLoginPage)
        {
            // Initialize sidebar state on first render when not on login page
            try
            {
                // Ensure custom JS is initialized
                await SidebarToggleService.InitializeJs();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing sidebar in MainLayout: {ex.Message}");
            }
        }
    }
}