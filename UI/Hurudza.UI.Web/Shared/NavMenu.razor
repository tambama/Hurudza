@using Hurudza.Data.Data
@using Hurudza.Data.UI.Models.ViewModels.Core
@using Hurudza.UI.Web.Models
@using Hurudza.UI.Web.Services
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorageService
@inject IApiCall ApiCall
@inject FarmAccessService FarmAccessService

<aside class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-3 "
       id="sidenav-main">
    <div class="sidenav-header">
        <i class="fas fa-times p-3 cursor-pointer text-secondary opacity-5 position-absolute end-0 top-0 d-none d-xl-none"
           aria-hidden="true" id="iconSidenav"></i>
        <a class="navbar-brand m-0" href="/">
            <img src="_content/Hurudza.UI.Shared/img/logo-ct-dark.png" class="navbar-brand-img h-100" alt="main_logo">
            <span class="ms-1 font-weight-bold">Hurudza</span>
        </a>
    </div>
    <hr class="horizontal dark mt-0">

    <div class="collapse navbar-collapse  w-auto h-auto" id="sidenav-collapse-main">
        <ul class="navbar-nav">
            <li class="nav-item">
                <a data-bs-toggle="collapse" href="#tillageSection" class="nav-link @TillageActive"
                   aria-controls="tillageSection" role="button" aria-expanded="@(_tillageExpanded ? "true" : "false")"
                   onclick="@ActivateTillage">
                    <div
                        class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center me-2">
                        <i class="fas fa-tractor text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                    <span class="nav-link-text ms-1">Tillage Program</span>
                </a>
                <div class="collapse @(_tillageExpanded ? "show" : "hidden")" id="tillageSection">
                    <ul class="nav ms-4 ps-3">
                        <li class="nav-item">
                            <a class="nav-link" href="/">
                                <span class="sidenav-mini-icon"> D </span>
                                <span class="sidenav-normal"> Dashboard </span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/tillage-programs">
                                <span class="sidenav-mini-icon"> P </span>
                                <span class="sidenav-normal"> Programs </span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/tillage-reports">
                                <span class="sidenav-mini-icon"> R </span>
                                <span class="sidenav-normal">Tillage Reports</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </li>

            <li class="nav-item">
                <a class="nav-link @MapActive" href="/map" onclick="@ActivateMap">
                    <div
                        class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center me-2">
                        <i class="fas fa-map-marked-alt text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                    <span class="nav-link-text ms-1">Map</span>
                </a>
            </li>

            <li class="nav-item mt-3">
                <h6 class="ps-4 ms-2 text-uppercase text-xs font-weight-bolder opacity-6">Farm Management</h6>
            </li>

            @if (_accessibleFarms != null && _accessibleFarms.Any())
            {
                <li class="nav-item">
                    <a data-bs-toggle="collapse" href="#farmsSection" class="nav-link @FarmsActive"
                       aria-controls="farmsSection" role="button" aria-expanded="@(_farmsExpanded ? "true" : "false")"
                       onclick="@ActivateFarms">
                        <div
                            class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="ni ni-building text-lg opacity-10" aria-hidden="true"></i>
                        </div>
                        <span class="nav-link-text ms-1">Farms</span>
                    </a>
                    <div class="collapse @(_farmsExpanded ? "show" : "hidden")" id="farmsSection">
                        <ul class="nav ms-4 ps-3">
                            <li class="nav-item">
                                <a class="nav-link" href="/farms">
                                    <span class="sidenav-mini-icon"> F </span>
                                    <span class="sidenav-normal"> All Farms </span>
                                </a>
                            </li>
                            @if (_accessibleFarms.Count <= 5)
                            {
                                @foreach (var farm in _accessibleFarms)
                                {
                                    <li class="nav-item">
                                        <a class="nav-link" href="/farm/@farm.Id">
                                            <span class="sidenav-mini-icon"> @farm.Name.Substring(0, 1) </span>
                                            <span class="sidenav-normal text-truncate"
                                                  style="max-width: 150px;"> @farm.Name </span>
                                        </a>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </li>

                <li class="nav-item">
                    <a class="nav-link @FieldsActive" href="/fields" onclick="@ActivateFields">
                        <div
                            class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="ni ni-map-big text-lg opacity-10" aria-hidden="true"></i>
                        </div>
                        <span class="nav-link-text ms-1">Fields</span>
                    </a>
                </li>

                <li class="nav-item">
                    <a data-bs-toggle="collapse" href="#cropsSection" class="nav-link @CropsActive"
                       aria-controls="cropsSection" role="button" aria-expanded="@(_cropsExpanded ? "true" : "false")"
                       onclick="@ActivateCrops">
                        <div
                            class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="fas fa-seedling text-lg opacity-10" aria-hidden="true"></i>
                        </div>
                        <span class="nav-link-text ms-1">Crops</span>
                    </a>
                    <div class="collapse @(_cropsExpanded ? "show" : "hidden")" id="cropsSection">
                        <ul class="nav ms-4 ps-3">
                            <li class="nav-item">
                                <a class="nav-link" href="/crops">
                                    <span class="sidenav-mini-icon"> A </span>
                                    <span class="sidenav-normal"> All Crops </span>
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/crops/reports">
                                    <span class="sidenav-mini-icon"> R </span>
                                    <span class="sidenav-normal"> Crop Reports </span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </li>

                <li class="nav-item">
                    <a class="nav-link @EquipmentActive" href="/equipment" onclick="@ActivateEquipment">
                        <div
                            class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="fas fa-cogs text-lg opacity-10" aria-hidden="true"></i>
                        </div>
                        <span class="nav-link-text ms-1">Equipment</span>
                    </a>
                </li>
            }

            @* Admin Section *@
            @if (IsAdministrator())
            {
                <li class="nav-item mt-3">
                    <h6 class="ps-4 ms-2 text-uppercase text-xs font-weight-bolder opacity-6">Administration</h6>
                </li>
                <li class="nav-item">
                    <a class="nav-link @UsersActive" href="/users" onclick="@ActivateUsers">
                        <div
                            class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="ni ni-single-02 text-lg opacity-10" aria-hidden="true"></i>
                        </div>
                        <span class="nav-link-text ms-1">Users</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @RolesActive" href="/roles" onclick="@ActivateRoles">
                        <div
                            class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="ni ni-key-25 text-lg opacity-10" aria-hidden="true"></i>
                        </div>
                        <span class="nav-link-text ms-1">Roles</span>
                    </a>
                </li>

                @* Only show Farm Assignments to System Administrators *@
                @if (_user.IsInRole(ApiRoles.SystemAdministrator))
                {
                    <li class="nav-item">
                        <a class="nav-link @FarmAssignmentsActive" href="/farm-assignments"
                           onclick="@ActivateFarmAssignments">
                            <div
                                class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
                                <i class="ni ni-badge text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                            <span class="nav-link-text ms-1">Farm Assignments</span>
                        </a>
                    </li>
                }
            }

            @if (false)
            {
                <li class="nav-item">
                    <a data-bs-toggle="collapse" href="#componentsExamples" class="nav-link @OwnershipActive"
                       aria-controls="componentsExamples" role="button" aria-expanded="false">
                        <div
                            class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
                            <svg width="12px" height="12px" viewBox="0 0 46 42" version="1.1"
                                 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                <title>customer-support</title>
                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                    <g transform="translate(-1717.000000, -291.000000)" fill="#FFFFFF"
                                       fill-rule="nonzero">
                                        <g transform="translate(1716.000000, 291.000000)">
                                            <g transform="translate(1.000000, 0.000000)">
                                                <path class="color-background"
                                                      d="M45,0 L26,0 C25.447,0 25,0.447 25,1 L25,20 C25,20.379 25.214,20.725 25.553,20.895 C25.694,20.965 25.848,21 26,21 C26.212,21 26.424,20.933 26.6,20.8 L34.333,15 L45,15 C45.553,15 46,14.553 46,14 L46,1 C46,0.447 45.553,0 45,0 Z"
                                                      opacity="0.59858631"></path>
                                                <path class="color-foreground"
                                                      d="M22.883,32.86 C20.761,32.012 17.324,31 13,31 C8.676,31 5.239,32.012 3.116,32.86 C1.224,33.619 0,35.438 0,37.494 L0,41 C0,41.553 0.447,42 1,42 L25,42 C25.553,42 26,41.553 26,41 L26,37.494 C26,35.438 24.776,33.619 22.883,32.86 Z"></path>
                                                <path class="color-foreground"
                                                      d="M13,28 C17.432,28 21,22.529 21,18 C21,13.589 17.411,10 13,10 C8.589,10 5,13.589 5,18 C5,22.529 8.568,28 13,28 Z"></path>
                                            </g>
                                        </g>
                                    </g>
                                </g>
                            </svg>
                        </div>
                        <span class="nav-link-text ms-1">Ownership</span>
                    </a>
                    <div class="collapse" id="componentsExamples">
                        <ul class="nav ms-4 ps-3">
                            <li class="nav-item">
                                <a class="nav-link" href="/ownership" onclick="@ActivateOwnership">
                                    <span class="sidenav-mini-icon"> O </span>
                                    <span class="sidenav-normal"> Ownership </span>
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/entities" onclick="@ActivateOwnership">
                                    <span class="sidenav-mini-icon"> E </span>
                                    <span class="sidenav-normal"> Entities </span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </li>
            }
        </ul>
    </div>
</aside>

@code
{
    private string MapActive = "";
    private string StatsActive = "";
    private string FarmsActive = "";
    private string FieldsActive = "";
    private string TillageActive = "";
    private string OwnershipActive = "";
    private string UsersActive = "";
    private string RolesActive = "";
    private string CropsActive = "";
    private string EquipmentActive = "";
    private string FarmAssignmentsActive = "";
    private CustomAuthStateProvider _authProvider;
    private ClaimsPrincipal _user;

    // Accessible farms and permissions
    private List<FarmListViewModel> _accessibleFarms = new();
    private bool _hasFieldManagePermission = false;
    private bool _hasCropManagePermission = false;

    // Menu expansion state
    private bool _farmsExpanded = false;
    private bool _fieldsExpanded = false;
    private bool _cropsExpanded = false;
    private bool _tillageExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        _authProvider = AuthStateProvider as CustomAuthStateProvider;
        if (_authProvider != null)
        {
            var authState = await _authProvider.GetAuthenticationStateAsync();
            _user = authState.User;

            if (_user.Identity?.IsAuthenticated == true)
            {
                await LoadAccessibleFarms();
                await CheckPermissions();

                // Set initial expanded state based on URL
                var currentUrl = Navigation.Uri.ToLower();
                _farmsExpanded = currentUrl.Contains("/farm/");
                _fieldsExpanded = currentUrl.Contains("/field/");
                _cropsExpanded = currentUrl.Contains("/crop/");
                _tillageExpanded = currentUrl.Contains("/tillage");

                // Set active menu based on URL
                SetActiveMenuFromUrl(currentUrl);
            }

            // Debug output
            Console.WriteLine($"NavMenu - Is authenticated: {_user.Identity?.IsAuthenticated}");
            Console.WriteLine($"NavMenu - User name: {_user.Identity?.Name}");
            Console.WriteLine($"NavMenu - Roles: {string.Join(", ", _user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value))}");
            Console.WriteLine($"NavMenu - User is in SystemAdministrator role: {_user.IsInRole(ApiRoles.SystemAdministrator)}");
            Console.WriteLine($"NavMenu - User is in Administrator role: {_user.IsInRole(ApiRoles.Administrator)}");

            foreach (var claim in _user.Claims)
            {
                Console.WriteLine($"NavMenu - Claim: {claim.Type} = {claim.Value}");
            }
        }
    }

    private async Task LoadAccessibleFarms()
    {
        try
        {
            // Get the current user's ID
            var userId = _user.FindFirstValue(ClaimTypes.NameIdentifier) ??
                         _user.FindFirstValue("UserId");

            if (!string.IsNullOrEmpty(userId))
            {
                // Call the API with the userId parameter
                var client = await ApiCall.GetHttpClient();
                var response = await ApiCall.Get<Models.ApiResponse<List<FarmListViewModel>>>(
                    client, $"farmusers/getaccessiblefarms/{userId}");

                if (response?.Status == 200 && response.Result != null)
                {
                    _accessibleFarms = response.Result;
                    Console.WriteLine($"NavMenu - Loaded {_accessibleFarms.Count} accessible farms for user {userId}");
                }
                else
                {
                    Console.WriteLine($"NavMenu - API returned non-success response: {response?.Status}, {response?.Title}");
                    _accessibleFarms = new List<FarmListViewModel>();
                }
            }
            else
            {
                Console.WriteLine("NavMenu - No user ID found, cannot load accessible farms");
                _accessibleFarms = new List<FarmListViewModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"NavMenu - Error loading accessible farms: {ex.Message}");
            _accessibleFarms = new List<FarmListViewModel>();
        }
    }

    private async Task CheckPermissions()
    {
        _hasFieldManagePermission = await FarmAccessService.HasPermission(Claims.FieldManage);
        _hasCropManagePermission = await FarmAccessService.HasPermission(Claims.CropManage);

        Console.WriteLine($"NavMenu - Has Field Manage Permission: {_hasFieldManagePermission}");
        Console.WriteLine($"NavMenu - Has Crop Manage Permission: {_hasCropManagePermission}");
    }

    private void SetActiveMenuFromUrl(string url)
    {
        ResetAllMenus();

        if (url.Contains("/farm"))
        {
            ActivateFarms();
        }
        else if (url.Contains("/field"))
        {
            ActivateFields();
        }
        else if (url.Contains("/crop"))
        {
            ActivateCrops();
        }
        else if (url.Contains("/equipment"))
        {
            ActivateEquipment();
        }
        else if (url.Contains("/map"))
        {
            ActivateMap();
        }
        else if (url.Contains("/user"))
        {
            ActivateUsers();
        }
        else if (url.Contains("/role"))
        {
            ActivateRoles();
        }
        else if (url.Contains("/farm-assignment"))
        {
            ActivateFarmAssignments();
        }
        else if (url.Contains("/ownership") || url.Contains("/entities"))
        {
            ActivateOwnership();
        }
        else
        {
            ActivateTillage();
        }
    }

    private bool IsAdministrator()
    {
        if (_user == null || !_user.Identity.IsAuthenticated)
            return false;

        bool isSystemAdmin = _user.IsInRole(ApiRoles.SystemAdministrator);
        bool isAdmin = _user.IsInRole(ApiRoles.Administrator);
        bool hasRoleClaim = _user.Claims.Any(c => c.Type == ClaimTypes.Role &&
                                                  (c.Value == ApiRoles.SystemAdministrator ||
                                                   c.Value == ApiRoles.Administrator));

        Console.WriteLine($"NavMenu - IsAdministrator check: isSystemAdmin={isSystemAdmin}, isAdmin={isAdmin}, hasRoleClaim={hasRoleClaim}");

        return isSystemAdmin || isAdmin || hasRoleClaim;
    }

    private void ActivateMap()
    {
        ResetAllMenus();
        MapActive = "active";
    }

    private void ActivateStats()
    {
        ResetAllMenus();
        StatsActive = "active";
    }

    private void ActivateFarms()
    {
        if (_farmsExpanded && FarmsActive == "active")
        {
            _farmsExpanded = false;
        }
        else
        {
            ResetAllMenus();
            FarmsActive = "active";
            _farmsExpanded = true;
        }
    }

    private void ActivateFarm(string farmId)
    {
        ResetAllMenus();
        FarmsActive = "active";
        _farmsExpanded = true;
    }

    private void ActivateFields()
    {
        ResetAllMenus();
        FieldsActive = "active";
        _fieldsExpanded = true;
    }

    private void ActivateCrops()
    {
        if (_cropsExpanded && CropsActive == "active")
        {
            _cropsExpanded = false;
        }
        else
        {
            ResetAllMenus();
            CropsActive = "active";
            _cropsExpanded = true;
        }
    }

    private void ActivateTillage()
    {
        if (_tillageExpanded && TillageActive == "active")
        {
            _tillageExpanded = false;
        }
        else
        {
            ResetAllMenus();
            TillageActive = "active";
            _tillageExpanded = true;
        }
    }

    private void ActivateOwnership()
    {
        ResetAllMenus();
        OwnershipActive = "active";
    }

    private void ActivateUsers()
    {
        ResetAllMenus();
        UsersActive = "active";
    }

    private void ActivateRoles()
    {
        ResetAllMenus();
        RolesActive = "active";
    }

    private void ActivateEquipment()
    {
        ResetAllMenus();
        EquipmentActive = "active";
    }

    private void ActivateFarmAssignments()
    {
        ResetAllMenus();
        FarmAssignmentsActive = "active";
    }

    private void ResetAllMenus()
    {
        MapActive = "";
        StatsActive = "";
        FarmsActive = "";
        FieldsActive = "";
        CropsActive = "";
        EquipmentActive = "";
        OwnershipActive = "";
        UsersActive = "";
        RolesActive = "";
        TillageActive = "";
        FarmAssignmentsActive = "";

        _farmsExpanded = false;
        _fieldsExpanded = false;
        _cropsExpanded = false;
        _tillageExpanded = false;
    }
}