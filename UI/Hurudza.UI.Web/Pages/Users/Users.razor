@page "/users"
@using FilterType = Syncfusion.Blazor.Grids.FilterType
@using Microsoft.AspNetCore.Http
@using Hurudza.UI.Web.Cookie.Providers
@attribute [Authorize]

@inject IApiCall ApiCall
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="row">
    <div class="col-12">
        <div class="card mb-4">
            <div class="card-header pb-0">
                <h6>System Users</h6>
            </div>
            <div class="card-body px-2 pt-0 pb-2">
                <SfGrid
                    DataSource="@SystemUsers"
                    @ref="Grid"
                    AllowPaging="true"
                    AllowExcelExport="true"
                    AllowSorting="true"
                    AllowMultiSorting="true"
                    EnableStickyHeader="true"
                    AllowResizing="true"
                    AllowFiltering="true"
                    AllowSelection="true"
                    Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "ExcelExport", "Print", "Search" })"
                    ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Edit", "Delete", "Copy", "ExcelExport", "Print", "FirstPage", "PrevPage", "LastPage", "NextPage" })">
                    <GridPageSettings PageSize="12"></GridPageSettings>
                    <GridFilterSettings Type="FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                    <GridEvents OnActionBegin="ActionBeginHandler" RowSelected="RowSelectHandler" TValue="UserViewModel"></GridEvents>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog">
                        <Template>
                            @{
                                var User = (context as UserViewModel);
                                <div>
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label>Order ID</label>
                                            <SfTextBox ID="id" TValue="string" FloatLabelType="FloatLabelType.Always" @bind-Value="@(User.Id]])" Enabled="@Data"></SfTextBox>
                                        </div>
                                        <div class="form-group">
                                            <label>Firstname</label>
                                            <SfTextBox ID="firstname" TValue="string" FloatLabelType="FloatLabelType.Always" @bind-Value="@(User.Firstname)"></SfTextBox>
                                        </div>
                                        <div class="form-group">
                                            <label>Order Date</label>
                                            <SfDatePicker ID="OrderDate" FloatLabelType="FloatLabelType.Always" @bind-Value="@(User.OrderDate)"></SfDatePicker>
                                        </div>
                                    </div>
                                </div>
                            }
                        </Template>
                    </GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(.OrderID) HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" EditType="EditType.DatePickerEdit" Visible="true" Format="d" TextAlign="TextAlign.Center" Width="130" Type="ColumnType.Date"></GridColumn>
                        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    </GridColumns>
                </SfGrid>
                <SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
                    <DialogEvents Closed="Closed"></DialogEvents>
                    <DialogTemplates>
                        <Header> Delete Record</Header>
                        <Content> You are about to Delete a Record @SelectedUser.Fullname?</Content>
                    </DialogTemplates>
                    <DialogButtons>
                        <DialogButton OnClick="@OkClick" Content="OK" IsPrimary="true"></DialogButton>
                        <DialogButton OnClick="@CancelClick" Content="Cancel"></DialogButton>
                    </DialogButtons>
                </SfDialog>
            </div>
        </div>
    </div>
</div>

@code{
    SfGrid<UserViewModel> Grid;
    SfDialog Dialog;
    public List<UserViewModel> SystemUsers { get; set; }
    public bool Enabled = true;
    public bool Data = false;
    public UserViewModel SelectedUser;
    public bool flag = true;
    public void Closed()
    {
        flag = true;
    }

    public void ActionBeginHandler(ActionEventArgs<UserViewModel> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            Data = true;
        }
        
        if (args.RequestType.ToString() == "FilterChoiceRequest")
        {
            args.FilterChoiceCount = 2;    //here you can override the default take count
        }
        
        if (args.RequestType.ToString() == "Delete" && flag)
        {
            args.Cancel = true;  //Cancel default delete action.
            Dialog.Show();
            flag = false;
        }
    }
    
    public void RowSelectHandler(RowSelectEventArgs<UserViewModel> args)
    {
        SelectedUser = args.Data;
    }
    
    private void OkClick()
    {
        Grid.DeleteRecord();   //Delete the record programmatically while clicking OK button.
        Dialog.Hide();
    }
    
    private void CancelClick()
    {
        Dialog.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await (AuthenticationStateProvider as CustomAuthStateProvider)?.GetAuthenticationStateAsync()).User;
        SystemUsers = (await ApiCall.Get<IEnumerable<UserViewModel>>(await ApiCall.GetHttpClient(), "api/users/getusers/")).ToList();
    }
}