@page "/harvest/schedule"
@attribute [Authorize]

@using System.Net
@using Hurudza.Data.Enums.Enums
@using Hurudza.Data.UI.Models.ViewModels.Core
@using Hurudza.Data.UI.Models.Models
@using Hurudza.UI.Web.Services
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@inject IApiCall ApiCall
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject FarmAccessService FarmAccessService

<Toast @ref="Alert" />

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex align-items-center">
                        <button class="btn btn-outline-secondary me-3" @onclick="GoBack">
                            <i class="fas fa-arrow-left me-1"></i>Back
                        </button>
                        <div>
                            <h5 class="mb-0">Harvest Schedule</h5>
                            <p class="text-sm mb-0">Manage harvest schedules and timing</p>
                        </div>
                        @if (!isLoading && harvestSchedules.Any())
                        {
                            <div class="ms-auto">
                                <button class="btn btn-primary btn-sm" @onclick="AddNew">
                                    <i class="fas fa-plus me-1"></i>Schedule Harvest
                                </button>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Schedules List View -->
                        @if (harvestSchedules.Any())
                        {
                            <!-- Filter and Summary Cards -->
                            <div class="row mb-4">
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-body p-3 text-center">
                                            <div class="text-primary">
                                                <i class="fas fa-clock fa-2x mb-2"></i>
                                            </div>
                                            <h5 class="font-weight-bolder mb-0">@upcomingCount</h5>
                                            <p class="text-sm mb-0">Upcoming</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-body p-3 text-center">
                                            <div class="text-warning">
                                                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                                            </div>
                                            <h5 class="font-weight-bolder mb-0">@overdueCount</h5>
                                            <p class="text-sm mb-0">Overdue</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-body p-3 text-center">
                                            <div class="text-info">
                                                <i class="fas fa-play fa-2x mb-2"></i>
                                            </div>
                                            <h5 class="font-weight-bolder mb-0">@inProgressCount</h5>
                                            <p class="text-sm mb-0">In Progress</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-body p-3 text-center">
                                            <div class="text-success">
                                                <i class="fas fa-check-circle fa-2x mb-2"></i>
                                            </div>
                                            <h5 class="font-weight-bolder mb-0">@completedCount</h5>
                                            <p class="text-sm mb-0">Completed</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Schedules Table -->
                            <div class="table-responsive">
                                <table class="table align-items-center mb-0">
                                    <thead>
                                        <tr>
                                            <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Field/Crop</th>
                                            <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Plan</th>
                                            <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Planned Date</th>
                                            <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Priority</th>
                                            <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                                            <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Est. Yield</th>
                                            <th class="text-secondary opacity-7">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var schedule in harvestSchedules.OrderBy(s => s.PlannedDate))
                                        {
                                            <tr class="@(schedule.IsOverdue && schedule.Status == HarvestStatus.Planned ? "bg-light-danger" : "")">
                                                <td>
                                                    <div class="d-flex px-2 py-1">
                                                        <div class="d-flex flex-column justify-content-center">
                                                            <h6 class="mb-0 text-sm">@schedule.Field</h6>
                                                            <p class="text-xs text-secondary mb-0">@schedule.Crop</p>
                                                            @if (schedule.IsOverdue && schedule.Status == HarvestStatus.Planned)
                                                            {
                                                                <small class="text-danger">
                                                                    <i class="fas fa-exclamation-triangle me-1"></i>
                                                                    @Math.Abs(schedule.DaysFromPlanned) days overdue
                                                                </small>
                                                            }
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <p class="text-xs font-weight-bold mb-0">@schedule.HarvestPlan</p>
                                                    <p class="text-xs text-secondary mb-0">@schedule.Farm</p>
                                                </td>
                                                <td>
                                                    <p class="text-xs font-weight-bold mb-0">@schedule.PlannedDate.ToString("MMM dd, yyyy")</p>
                                                    @if (schedule.ActualDate.HasValue)
                                                    {
                                                        <p class="text-xs text-success mb-0">
                                                            Actual: @schedule.ActualDate.Value.ToString("MMM dd")
                                                        </p>
                                                    }
                                                </td>
                                                <td class="align-middle text-center text-sm">
                                                    <span class="badge badge-sm bg-gradient-@(GetPriorityColor(schedule.Priority))">
                                                        @schedule.Priority.ToString("G")
                                                    </span>
                                                </td>
                                                <td class="align-middle text-center text-sm">
                                                    <span class="badge badge-sm bg-gradient-@(GetStatusColor(schedule.Status))">
                                                        @schedule.Status.ToString("G").Replace("_", " ")
                                                    </span>
                                                </td>
                                                <td class="align-middle text-center">
                                                    <span class="text-secondary text-xs font-weight-bold">
                                                        @schedule.EstimatedYield.ToString("N1") @schedule.EstimatedYieldUnit.ToString("G").Replace("_", " ")
                                                    </span>
                                                    @if (schedule.ActualYield > 0)
                                                    {
                                                        <br />
                                                        <span class="text-success text-xs">
                                                            Actual: @schedule.ActualYield.ToString("N1")
                                                        </span>
                                                    }
                                                </td>
                                                <td class="align-middle">
                                                    <div class="d-flex">
                                                        @if (schedule.Status == HarvestStatus.Planned)
                                                        {
                                                            <button class="btn btn-link text-success mb-0 p-1 me-1" title="Record Harvest" @onclick="(() => RecordHarvest(schedule.Id))">
                                                                <i class="fas fa-seedling text-xs" aria-hidden="true"></i>
                                                            </button>
                                                        }
                                                        <button class="btn btn-link text-secondary mb-0 p-1 me-1" title="Edit" @onclick="(() => EditSchedule(schedule.Id))" @onclick:stopPropagation="true">
                                                            <i class="fa fa-edit text-xs" aria-hidden="true"></i>
                                                        </button>
                                                        <button class="btn btn-link text-info mb-0 p-1 me-1" title="View Details" @onclick="(() => ViewDetails(schedule.Id))" @onclick:stopPropagation="true">
                                                            <i class="fa fa-eye text-xs" aria-hidden="true"></i>
                                                        </button>
                                                        <button class="btn btn-link text-danger mb-0 p-1" title="Delete" @onclick="(() => DeleteSchedule(schedule.Id))" @onclick:stopPropagation="true">
                                                            <i class="fa fa-trash text-xs" aria-hidden="true"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <i class="fas fa-calendar-alt fa-3x text-secondary mb-3"></i>
                                <h5 class="text-secondary">No harvest schedules found</h5>
                                <p class="text-muted mb-3">Create harvest schedules to plan your field activities.</p>
                                @if (availablePlans.Any())
                                {
                                    <button class="btn btn-primary" @onclick="AddNew">
                                        <i class="fas fa-plus me-2"></i>Schedule Harvest
                                    </button>
                                }
                                else
                                {
                                    <p class="text-warning">You need to create a harvest plan first.</p>
                                    <button class="btn btn-outline-primary" @onclick="GoToPlanning">
                                        <i class="fas fa-calendar-plus me-2"></i>Create Harvest Plan
                                    </button>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "QueryParams")]
    private Dictionary<string, string> QueryParams { get; set; } = new();

    private Toast Alert;
    private bool isLoading = true;
    private ClaimsPrincipal _user;
    private string currentFarmId = string.Empty;
    private string currentFarmName = string.Empty;
    private string? planIdFromQuery;

    private List<HarvestScheduleViewModel> harvestSchedules = new();
    private List<HarvestPlanViewModel> availablePlans = new();

    // Computed properties
    private int upcomingCount => harvestSchedules.Count(s => s.Status == HarvestStatus.Planned && s.PlannedDate >= DateTime.Today);
    private int overdueCount => harvestSchedules.Count(s => s.IsOverdue && s.Status == HarvestStatus.Planned);
    private int inProgressCount => harvestSchedules.Count(s => s.Status == HarvestStatus.InProgress);
    private int completedCount => harvestSchedules.Count(s => s.Status == HarvestStatus.Completed);

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;

        // Check for planId query parameter
        var uri = new Uri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        planIdFromQuery = queryString["planId"];

        // Get current farm context
        currentFarmId = await FarmAccessService.GetCurrentFarmId();
        currentFarmName = await FarmAccessService.GetCurrentFarmName();

        if (string.IsNullOrEmpty(currentFarmId))
        {
            Alert.Show("No farm context found. Please select a farm profile.", showTitle: true, toastType: ToastType.Danger);
            NavigationManager.NavigateTo("/farms");
            return;
        }

        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            // Load harvest schedules based on context
            harvestSchedules.Clear();
            if (!string.IsNullOrEmpty(planIdFromQuery))
            {
                // Load schedules for specific plan
                var planSchedules = await ApiCall.Get<List<HarvestScheduleViewModel>>(
                    await ApiCall.GetHttpClient(), $"Harvest/GetHarvestSchedulesByPlan/{planIdFromQuery}");
                if (planSchedules != null)
                    harvestSchedules = planSchedules;
            }
            else
            {
                // Load all schedules for current farm
                var farmSchedules = await ApiCall.Get<List<HarvestScheduleViewModel>>(
                    await ApiCall.GetHttpClient(), $"Harvest/GetHarvestSchedulesByFarm/{currentFarmId}");
                if (farmSchedules != null)
                    harvestSchedules = farmSchedules;
            }

            // Load available harvest plans for current farm only
            availablePlans.Clear();
            var farmPlans = await ApiCall.Get<List<HarvestPlanViewModel>>(
                await ApiCall.GetHttpClient(), $"Harvest/GetHarvestPlansByFarm/{currentFarmId}");
            if (farmPlans != null)
                availablePlans = farmPlans.Where(p => p.Status == HarvestPlanStatus.Active || p.Status == HarvestPlanStatus.Draft).ToList();
        }
        catch (Exception ex)
        {
            Alert.Show($"Error loading data: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
    }

    private string GetPriorityColor(HarvestPriority priority)
    {
        return priority switch
        {
            HarvestPriority.Critical => "danger",
            HarvestPriority.High => "warning",
            HarvestPriority.Medium => "info",
            HarvestPriority.Low => "success",
            _ => "secondary"
        };
    }

    private string GetStatusColor(HarvestStatus status)
    {
        return status switch
        {
            HarvestStatus.Planned => "primary",
            HarvestStatus.InProgress => "info",
            HarvestStatus.Completed => "success",
            HarvestStatus.Delayed => "warning",
            HarvestStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }

    private void AddNew()
    {
        var url = "/harvest/schedule/add";
        if (!string.IsNullOrEmpty(planIdFromQuery))
        {
            url += $"?planId={planIdFromQuery}";
        }
        NavigationManager.NavigateTo(url);
    }

    private void EditSchedule(string? scheduleId)
    {
        if (!string.IsNullOrEmpty(scheduleId))
        {
            NavigationManager.NavigateTo($"/harvest/schedule/edit/{scheduleId}");
        }
    }

    private void ViewDetails(string? scheduleId)
    {
        if (!string.IsNullOrEmpty(scheduleId))
        {
            NavigationManager.NavigateTo($"/harvest/schedule/details/{scheduleId}");
        }
    }

    private void RecordHarvest(string? scheduleId)
    {
        if (!string.IsNullOrEmpty(scheduleId))
        {
            NavigationManager.NavigateTo($"/harvest/record/{scheduleId}");
        }
    }

    private async Task DeleteSchedule(string? scheduleId)
    {
        if (string.IsNullOrEmpty(scheduleId)) return;

        if (await ConfirmDelete())
        {
            try
            {
                var response = await ApiCall.Remove<UI.Shared.Models.ApiResponse<HarvestScheduleViewModel>>(
                    await ApiCall.GetHttpClient(), "Harvest/DeleteHarvestSchedule", scheduleId);

                if (response.Status == (int)HttpStatusCode.OK)
                {
                    Alert.Show("Harvest schedule deleted successfully!", showTitle: true, toastType: ToastType.Success);
                    await LoadData();
                }
                else
                {
                    Alert.Show(response.Title ?? "Failed to delete harvest schedule", showTitle: true, toastType: ToastType.Danger);
                }
            }
            catch (Exception ex)
            {
                Alert.Show($"Error deleting harvest schedule: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            }
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // Simple confirmation - in a real app you'd use a proper modal dialog
        return true;
    }

    private void GoBack()
    {
        if (!string.IsNullOrEmpty(planIdFromQuery))
        {
            NavigationManager.NavigateTo("/harvest/planning");
        }
        else
        {
            NavigationManager.NavigateTo("/harvest");
        }
    }

    private void GoToPlanning()
    {
        NavigationManager.NavigateTo("/harvest/planning/add");
    }
}