@page "/harvest/planning"
@attribute [Authorize]

@using System.Net
@using Hurudza.Data.Enums.Enums
@using Hurudza.Data.UI.Models.ViewModels.Core
@using Hurudza.Data.UI.Models.Models
@using Hurudza.UI.Web.Services
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@inject IApiCall ApiCall
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject FarmAccessService FarmAccessService

<Toast @ref="Alert" />

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex align-items-center">
                        <button class="btn btn-outline-secondary me-3" @onclick="GoBack">
                            <i class="fas fa-arrow-left me-1"></i>Back
                        </button>
                        <div>
                            <h5 class="mb-0">Harvest Planning</h5>
                            <p class="text-sm mb-0">Manage seasonal harvest plans</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">

                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Plans List View -->
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="mb-0">Harvest Plans</h6>
                                        <p class="text-sm text-muted mb-0">Manage your seasonal harvest plans</p>
                                    </div>
                                    <button class="btn btn-primary btn-sm" @onclick="AddNew">
                                        <i class="fas fa-plus me-1"></i>New Plan
                                    </button>
                                </div>

                                @if (harvestPlans.Any())
                                {
                                    <div class="row">
                                        @foreach (var plan in harvestPlans)
                                        {
                                            <div class="col-xl-4 col-md-6 mb-4">
                                                <div class="card">
                                                    <div class="card-body p-3">
                                                        <div class="row">
                                                            <div class="col-8">
                                                                <div class="numbers">
                                                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">@plan.Season</p>
                                                                    <h5 class="font-weight-bolder mb-0">@plan.Farm</h5>
                                                                    <p class="mb-0">
                                                                        <span class="text-success text-sm font-weight-bolder">@plan.Progress.ToString("F1")%</span>
                                                                        complete
                                                                    </p>
                                                                </div>
                                                            </div>
                                                            <div class="col-4 text-end">
                                                                <div class="icon icon-shape bg-gradient-@(GetStatusColor(plan.Status)) shadow text-center border-radius-md">
                                                                    <i class="@GetStatusIcon(plan.Status) text-lg opacity-10" aria-hidden="true"></i>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <hr class="dark horizontal">
                                                        <div class="d-flex">
                                                            <p class="mb-0 text-sm">
                                                                <span class="text-success">@plan.StartDate.ToString("MMM dd")</span> -
                                                                <span class="text-warning">@plan.EndDate.ToString("MMM dd, yyyy")</span>
                                                            </p>
                                                        </div>
                                                        <div class="d-flex justify-content-between mt-2">
                                                            <small class="text-muted">
                                                                @plan.CompletedHarvests / @plan.TotalScheduledHarvests schedules
                                                            </small>
                                                            <div>
                                                                <button class="btn btn-link text-secondary mb-0 p-0 me-2" @onclick="(() => EditPlan(plan.Id))">
                                                                    <i class="fa fa-edit text-xs" aria-hidden="true"></i>
                                                                </button>
                                                                <button class="btn btn-link text-secondary mb-0 p-0 me-2" @onclick="(() => ViewPlanDetails(plan.Id))">
                                                                    <i class="fa fa-eye text-xs" aria-hidden="true"></i>
                                                                </button>
                                                                <button class="btn btn-link text-danger mb-0 p-0" @onclick="(() => DeletePlan(plan.Id))">
                                                                    <i class="fa fa-trash text-xs" aria-hidden="true"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center p-4">
                                        <i class="fas fa-calendar-plus fa-3x text-secondary mb-3"></i>
                                        <h5 class="text-secondary">No harvest plans found</h5>
                                        <p class="text-muted mb-3">Create your first harvest plan to get started with harvest management.</p>
                                        <button class="btn btn-primary" @onclick="AddNew">
                                            <i class="fas fa-plus me-2"></i>Create Harvest Plan
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Toast Alert;
    private bool isLoading = true;
    private ClaimsPrincipal _user;

    private List<HarvestPlanViewModel> harvestPlans = new();
    private string currentFarmId = string.Empty;
    private string currentFarmName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;

        // Get current farm context
        currentFarmId = await FarmAccessService.GetCurrentFarmId();
        currentFarmName = await FarmAccessService.GetCurrentFarmName();

        if (string.IsNullOrEmpty(currentFarmId))
        {
            Alert.Show("No farm context found. Please select a farm profile.", showTitle: true, toastType: ToastType.Danger);
            NavigationManager.NavigateTo("/farms");
            return;
        }

        // If farm name is empty, try to fetch it from the API
        if (string.IsNullOrEmpty(currentFarmName))
        {
            try
            {
                var farm = await ApiCall.Get<FarmViewModel>(
                    await ApiCall.GetHttpClient(), $"Farms/GetFarm/{currentFarmId}");
                if (farm != null)
                {
                    currentFarmName = farm.Name ?? "Farm";
                }
            }
            catch
            {
                currentFarmName = "Current Farm";
            }
        }

        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            // Load harvest plans for the current farm only
            harvestPlans.Clear();
            var farmPlans = await ApiCall.Get<List<HarvestPlanViewModel>>(
                await ApiCall.GetHttpClient(), $"Harvest/GetHarvestPlansByFarm/{currentFarmId}");
            if (farmPlans != null)
                harvestPlans = farmPlans;
        }
        catch (Exception ex)
        {
            Alert.Show($"Error loading data: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
    }

    private string GetStatusColor(HarvestPlanStatus status)
    {
        return status switch
        {
            HarvestPlanStatus.Draft => "secondary",
            HarvestPlanStatus.Active => "primary",
            HarvestPlanStatus.Completed => "success",
            HarvestPlanStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }

    private string GetStatusIcon(HarvestPlanStatus status)
    {
        return status switch
        {
            HarvestPlanStatus.Draft => "fas fa-file-alt",
            HarvestPlanStatus.Active => "fas fa-play",
            HarvestPlanStatus.Completed => "fas fa-check-circle",
            HarvestPlanStatus.Cancelled => "fas fa-times-circle",
            _ => "fas fa-file"
        };
    }

    private void AddNew()
    {
        NavigationManager.NavigateTo("/harvest/planning/add");
    }

    private void EditPlan(string? planId)
    {
        if (!string.IsNullOrEmpty(planId))
        {
            NavigationManager.NavigateTo($"/harvest/planning/edit/{planId}");
        }
    }

    private void ViewPlanDetails(string? planId)
    {
        if (!string.IsNullOrEmpty(planId))
        {
            NavigationManager.NavigateTo($"/harvest/schedule?planId={planId}");
        }
    }

    private async Task DeletePlan(string? planId)
    {
        if (string.IsNullOrEmpty(planId)) return;

        if (await ConfirmDelete())
        {
            try
            {
                var response = await ApiCall.Remove<UI.Shared.Models.ApiResponse<HarvestPlanViewModel>>(
                    await ApiCall.GetHttpClient(), "Harvest/DeleteHarvestPlan", planId);

                if (response.Status == (int)HttpStatusCode.OK)
                {
                    Alert.Show("Harvest plan deleted successfully!", showTitle: true, toastType: ToastType.Success);
                    await LoadData();
                }
                else
                {
                    Alert.Show(response.Title ?? "Failed to delete harvest plan", showTitle: true, toastType: ToastType.Danger);
                }
            }
            catch (Exception ex)
            {
                Alert.Show($"Error deleting harvest plan: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            }
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // Simple confirmation - in a real app you'd use a proper modal dialog
        return true; // For now, always confirm
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/harvest");
    }
}