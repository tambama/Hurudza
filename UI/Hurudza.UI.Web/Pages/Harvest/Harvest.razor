@page "/harvest"
@attribute [Authorize]

@using System.Net
@using Hurudza.Data.Enums.Enums
@using Hurudza.Data.UI.Models.ViewModels.Core
@using Hurudza.UI.Web.Services
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@inject IApiCall ApiCall
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject FarmAccessService FarmAccessService

<Toast @ref="Alert" />

<div class="container-fluid py-4">
    @if (!string.IsNullOrEmpty(currentFarmName))
    {
        <div class="row mb-3">
            <div class="col-12">
                <div class="alert alert-info">
                    <i class="fas fa-tractor me-2"></i>
                    Viewing harvest data for: <strong>@currentFarmName</strong>
                </div>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col-12">
                    <div class="row">
                        <div class="col-lg-3 col-md-6">
                            <div class="card">
                                <div class="card-body p-3">
                                    <div class="row">
                                        <div class="col-8">
                                            <div class="numbers">
                                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Plans</p>
                                                <h5 class="font-weight-bolder mb-0">
                                                    @totalPlans
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-4 text-end">
                                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                                <i class="fas fa-calendar-alt text-lg opacity-10" aria-hidden="true"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <div class="card">
                                <div class="card-body p-3">
                                    <div class="row">
                                        <div class="col-8">
                                            <div class="numbers">
                                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Upcoming</p>
                                                <h5 class="font-weight-bolder mb-0">
                                                    @upcomingHarvests.Count
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-4 text-end">
                                            <div class="icon icon-shape bg-gradient-info shadow text-center border-radius-md">
                                                <i class="fas fa-clock text-lg opacity-10" aria-hidden="true"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <div class="card">
                                <div class="card-body p-3">
                                    <div class="row">
                                        <div class="col-8">
                                            <div class="numbers">
                                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Overdue</p>
                                                <h5 class="font-weight-bolder mb-0 @(overdueHarvests.Count > 0 ? "text-danger" : "")">
                                                    @overdueHarvests.Count
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-4 text-end">
                                            <div class="icon icon-shape @(overdueHarvests.Count > 0 ? "bg-gradient-danger" : "bg-gradient-success") shadow text-center border-radius-md">
                                                <i class="fas fa-exclamation-triangle text-lg opacity-10" aria-hidden="true"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <div class="card">
                                <div class="card-body p-3">
                                    <div class="row">
                                        <div class="col-8">
                                            <div class="numbers">
                                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Completed</p>
                                                <h5 class="font-weight-bolder mb-0 text-success">
                                                    @completedHarvests
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-4 text-end">
                                            <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md">
                                                <i class="fas fa-check-circle text-lg opacity-10" aria-hidden="true"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-7 mb-lg-0 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="row">
                        <div class="col-lg-6 col-7">
                            <h6>Upcoming Harvests</h6>
                            <p class="text-sm mb-0">Next 30 days</p>
                        </div>
                        <div class="col-lg-6 col-5 my-auto text-end">
                            <button class="btn btn-outline-primary btn-sm mb-0" @onclick="ViewAllSchedules">
                                View All
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pb-2">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (upcomingHarvests.Any())
                    {
                        <div class="table-responsive">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Field/Crop</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Date</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Priority</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Est. Yield</th>
                                        <th class="text-secondary opacity-7"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var harvest in upcomingHarvests.Take(5))
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex px-2 py-1">
                                                    <div class="d-flex flex-column justify-content-center">
                                                        <h6 class="mb-0 text-sm">@harvest.Field</h6>
                                                        <p class="text-xs text-secondary mb-0">@harvest.Crop</p>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <p class="text-xs font-weight-bold mb-0">@harvest.PlannedDate.ToString("MMM dd")</p>
                                                <p class="text-xs text-secondary mb-0">@harvest.PlannedDate.ToString("yyyy")</p>
                                            </td>
                                            <td class="align-middle text-center text-sm">
                                                <span class="badge badge-sm bg-gradient-@(GetPriorityColor(harvest.Priority))">
                                                    @harvest.Priority.ToString("G")
                                                </span>
                                            </td>
                                            <td class="align-middle text-center">
                                                <span class="text-secondary text-xs font-weight-bold">
                                                    @harvest.EstimatedYield.ToString("N1") @harvest.EstimatedYieldUnit.ToString("G").Replace("_", " ")
                                                </span>
                                            </td>
                                            <td class="align-middle">
                                                <button class="btn btn-link text-secondary mb-0" @onclick="(() => ViewScheduleDetails(harvest.Id))">
                                                    <i class="fa fa-eye text-xs" aria-hidden="true"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <i class="fas fa-calendar-times fa-2x text-secondary mb-3"></i>
                            <p class="text-secondary mb-0">No upcoming harvests scheduled</p>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card h-100">
                <div class="card-header pb-0">
                    <h6>Recent Activity</h6>
                    <p class="text-sm">Latest harvest activities</p>
                </div>
                <div class="card-body p-3">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (recentRecords.Any())
                    {
                        <div class="timeline timeline-one-side">
                            @foreach (var record in recentRecords.Take(5))
                            {
                                <div class="timeline-block mb-3">
                                    <span class="timeline-step">
                                        <i class="fas fa-seedling text-success text-gradient"></i>
                                    </span>
                                    <div class="timeline-content">
                                        <h6 class="text-dark text-sm font-weight-bold mb-0">@record.Field - @record.Crop</h6>
                                        <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">
                                            @record.ActualYield.ToString("N1") @record.YieldUnit.ToString("G").Replace("_", " ") harvested
                                        </p>
                                        <p class="text-secondary text-xs mt-1 mb-0">
                                            @record.HarvestDate.ToString("MMM dd, yyyy")
                                        </p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <i class="fas fa-history fa-2x text-secondary mb-3"></i>
                            <p class="text-secondary mb-0">No recent harvest activity</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Toast Alert;
    private bool isLoading = true;
    private ClaimsPrincipal _user;
    private string currentFarmId = string.Empty;
    private string currentFarmName = string.Empty;

    // Dashboard data
    private int totalPlans = 0;
    private int completedHarvests = 0;
    private List<HarvestScheduleViewModel> upcomingHarvests = new();
    private List<HarvestScheduleViewModel> overdueHarvests = new();
    private List<HarvestRecordViewModel> recentRecords = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;

        // Get current farm context
        currentFarmId = await FarmAccessService.GetCurrentFarmId();
        currentFarmName = await FarmAccessService.GetCurrentFarmName();

        if (string.IsNullOrEmpty(currentFarmId))
        {
            Alert.Show("No farm context found. Please select a farm profile.", showTitle: true, toastType: ToastType.Danger);
            NavigationManager.NavigateTo("/farms");
            return;
        }

        await LoadDashboardData();
        isLoading = false;
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load harvest plans for current farm only
            var farmPlans = await ApiCall.Get<List<HarvestPlanViewModel>>(
                await ApiCall.GetHttpClient(), $"Harvest/GetHarvestPlansByFarm/{currentFarmId}");
            totalPlans = farmPlans?.Count ?? 0;

            // Load upcoming harvests for current farm only
            var farmUpcoming = await ApiCall.Get<List<HarvestScheduleViewModel>>(
                await ApiCall.GetHttpClient(), $"Harvest/GetUpcomingHarvests?farmId={currentFarmId}&days=30");
            upcomingHarvests = farmUpcoming?.OrderBy(h => h.PlannedDate).ToList() ?? new List<HarvestScheduleViewModel>();

            // Load overdue harvests for current farm only
            var farmOverdue = await ApiCall.Get<List<HarvestScheduleViewModel>>(
                await ApiCall.GetHttpClient(), $"Harvest/GetOverdueHarvests?farmId={currentFarmId}");
            overdueHarvests = farmOverdue?.OrderBy(h => h.PlannedDate).ToList() ?? new List<HarvestScheduleViewModel>();

            // Load recent harvest records for current farm only
            var farmRecords = await ApiCall.Get<List<HarvestRecordViewModel>>(
                await ApiCall.GetHttpClient(), $"Harvest/GetHarvestRecordsByFarm/{currentFarmId}");
            recentRecords = farmRecords?.OrderByDescending(r => r.HarvestDate).ToList() ?? new List<HarvestRecordViewModel>();

            // Calculate completed harvests
            completedHarvests = recentRecords.Count;
        }
        catch (Exception ex)
        {
            Alert.Show($"Error loading dashboard data: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
    }

    private string GetPriorityColor(HarvestPriority priority)
    {
        return priority switch
        {
            HarvestPriority.Critical => "danger",
            HarvestPriority.High => "warning",
            HarvestPriority.Medium => "info",
            HarvestPriority.Low => "success",
            _ => "secondary"
        };
    }

    private void ViewAllSchedules()
    {
        NavigationManager.NavigateTo("/harvest/schedule");
    }

    private void ViewScheduleDetails(string? scheduleId)
    {
        if (!string.IsNullOrEmpty(scheduleId))
        {
            NavigationManager.NavigateTo($"/harvest/schedule/details/{scheduleId}");
        }
    }
}