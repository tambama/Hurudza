@page "/farms"
@using System.Net
@using Hurudza.Data.Enums.Enums
@using Hurudza.Data.UI.Models.ViewModels.Core
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@attribute [Authorize]

@inject IApiCall ApiCall
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<Toast @ref="Alert" />

<div class="row">
    <div class="col-12">
        <div class="card mb-4">
            <div class="card-header pb-0">
                <div class="d-flex justify-content-between flex-wrap align-items-center">
                    <div>
                        <h6 class="mb-0">Farms Management</h6>
                        <p class="text-sm mb-0">Manage all farm properties and locations</p>
                    </div>
                    <div class="d-flex">
                        <FarmPermission RequireAdmin="true">
                            <button type="button" class="btn btn-primary btn-sm ms-auto" @onclick="NavigateToNewFarm">
                                <i class="fas fa-plus me-2"></i>Add New Farm
                            </button>
                        </FarmPermission>
                    </div>
                </div>
            </div>
            <div class="card-body px-0 pt-0 pb-2">
                <!-- Filters -->
                <div class="px-3 py-3">
                    <div class="row g-2">
                        <div class="col-md-3">
                            <div class="input-group input-group-outline">
                                <SfTextBox @bind-Value="searchText" Placeholder="Search farms..." @oninput="ApplyFilters"></SfTextBox>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <SfDropDownList TValue="string" TItem="string" DataSource="@provinceFilter" @bind-Value="selectedProvince" 
                                            Placeholder="Filter by Province" AllowFiltering="true">
                                <DropDownListEvents TValue="string" TItem="string" ValueChange="ApplyFilters"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                        <div class="col-md-3">
                            <SfDropDownList TValue="Region?" TItem="RegionModel" DataSource="@regionItems" @bind-Value="selectedRegion" 
                                            Placeholder="Filter by Region" AllowFiltering="true">
                                <DropDownListEvents TValue="Region?" TItem="RegionModel" ValueChange="ApplyFilters"></DropDownListEvents>
                                <DropDownListFieldSettings Value="Region" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="col-md-3">
                            <button type="button" class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                                <i class="fas fa-sync-alt me-2"></i>Reset Filters
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading indicator -->
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Farm Grid -->
                    <SfGrid DataSource="@filteredFarms"
                            @ref="Grid"
                            AllowPaging="true"
                            AllowExcelExport="true"
                            AllowSorting="true"
                            AllowMultiSorting="true"
                            EnableStickyHeader="true"
                            AllowResizing="true"
                            AllowSelection="true"
                            EnableVirtualization="true"
                            EnableHover="true"
                            Toolbar="@(new List<string>() { "ExcelExport", "Print", "Search" })"
                            ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Copy", "ExcelExport", "Print", "FirstPage", "PrevPage", "LastPage", "NextPage" })">
                        <GridPageSettings PageSize="10"></GridPageSettings>
                        <GridFilterSettings Type="FilterType.Menu" Mode="FilterBarMode.Immediate"></GridFilterSettings>
                        <GridEvents RowSelected="RowSelectHandler" TValue="FarmViewModel"></GridEvents>
                        
                        <GridColumns>
                            <GridColumn Field=@nameof(FarmViewModel.Id) HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(FarmViewModel.Name) HeaderText="Farm Name" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                            <GridColumn Field=@nameof(FarmViewModel.Province) HeaderText="Province" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(FarmViewModel.District) HeaderText="District" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(FarmViewModel.Size) HeaderText="Size (Ha)" TextAlign="TextAlign.Right" Format="N2" Width="90"></GridColumn>
                            <GridColumn Field=@nameof(FarmViewModel.Arable) HeaderText="Arable (Ha)" TextAlign="TextAlign.Right" Format="N2" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(FarmViewModel.Region) HeaderText="Region" TextAlign="TextAlign.Center" Width="90">
                                <Template>
                                    @{
                                        var farm = (context as FarmViewModel);
                                        if (!farm.Region.HasValue)
                                        {
                                            <span class='badge bg-secondary'>Not Set</span>
                                        }
                                        else
                                        {
                                            var badgeClass = farm.Region switch
                                            {
                                                Region.I => "bg-success",
                                                Region.II => "bg-info",
                                                Region.III => "bg-primary",
                                                Region.IV => "bg-warning",
                                                Region.V => "bg-danger",
                                                _ => "bg-secondary"
                                            };
                                            <span class='badge @badgeClass'>Region @farm.Region</span>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn Field=@nameof(FarmViewModel.Irrigated) HeaderText="Irrigation" TextAlign="TextAlign.Center" Width="100">
                                <Template>
                                    @{
                                        var farm = (context as FarmViewModel);
                                        if (farm.Irrigated)
                                        {
                                            <span class='badge bg-success'>Yes</span>
                                        }
                                        else
                                        {
                                            <span class='badge bg-secondary'>No</span>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn HeaderText="Actions" Width="150" TextAlign="TextAlign.Center">
                                <Template>
                                    @{
                                        var farm = (context as FarmViewModel);
                                        <div class="btn-group">
                                            <a href="/farm/@farm.Id" class="btn btn-link text-primary p-1" data-bs-toggle="tooltip" data-bs-title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <FarmPermission FarmId="@farm.Id" RequireManage="true">
                                                <a href="/farms/@farm.Id/edit" class="btn btn-link text-info p-1" data-bs-toggle="tooltip" data-bs-title="Edit Farm">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <button class="btn btn-link text-danger p-1" @onclick="() => OpenDeleteConfirmation(farm)" data-bs-toggle="tooltip" data-bs-title="Delete Farm">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </FarmPermission>
                                        </div>
                                    }
                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Dialog -->
<SfDialog @bind-Visible="isDeleteDialogVisible" Width="400px" IsModal="true" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>Confirm Deletion</Header>
        <Content>
            @if (selectedFarm != null)
            {
                <div>
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <p class="mb-0">Are you sure you want to delete the farm <strong>@selectedFarm.Name</strong>?</p>
                    </div>
                    <p>This action cannot be undone and will remove all farm data including fields, crops, and historical records.</p>
                    
                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-secondary me-2" @onclick="() => isDeleteDialogVisible = false">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteSelectedFarm" disabled="@isDeleting">
                            @if (isDeleting)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Deleting...</span>
                            }
                            else
                            {
                                <span>Delete Farm</span>
                            }
                        </button>
                    </div>
                </div>
            }
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    // References
    private SfGrid<FarmViewModel> Grid;
    private Toast Alert;
    
    // Data
    private List<FarmViewModel> farms = new();
    private List<FarmViewModel> filteredFarms = new();
    private FarmViewModel selectedFarm;
    
    // Filters
    private string searchText = "";
    private string selectedProvince = "";
    private Region? selectedRegion = null;
    private List<string> provinceFilter = new();
    private List<RegionModel> regionItems = new();
    
    // State
    private bool isLoading = true;
    private bool isDeleteDialogVisible = false;
    private bool isDeleting = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Initialize filter dropdowns
        regionItems = Enum.GetValues<Region>().Select(x => new RegionModel(x)).ToList();
        
        // Add empty option for filters
        regionItems.Insert(0, new RegionModel { Region = null, Name = "All Regions" });
        
        await LoadFarms();
    }
    
    private async Task LoadFarms()
    {
        try
        {
            isLoading = true;
            
            // Get farms from API
            var response = await ApiCall.Get<List<FarmViewModel>>(
                await ApiCall.GetHttpClient(), "Farms/GetFarms");
                
            if (response != null)
            {
                farms = response;
                
                // Initialize province filter from available data
                provinceFilter = farms
                    .Where(f => !string.IsNullOrEmpty(f.Province))
                    .Select(f => f.Province)
                    .Distinct()
                    .OrderBy(p => p)
                    .ToList();
                    
                // Add "All Provinces" option at the beginning
                provinceFilter.Insert(0, "All Provinces");
                
                // Apply any existing filters
                ApplyFilters();
            }
            else
            {
                farms = new List<FarmViewModel>();
                filteredFarms = new List<FarmViewModel>();
                Alert.Show("Error loading farms data. Please try again later.", showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            Alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            farms = new List<FarmViewModel>();
            filteredFarms = new List<FarmViewModel>();
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ApplyFilters()
    {
        filteredFarms = farms;
        
        // Apply province filter
        if (!string.IsNullOrEmpty(selectedProvince) && selectedProvince != "All Provinces")
        {
            filteredFarms = filteredFarms
                .Where(f => f.Province == selectedProvince)
                .ToList();
        }
        
        // Apply region filter
        if (selectedRegion.HasValue)
        {
            filteredFarms = filteredFarms
                .Where(f => f.Region == selectedRegion)
                .ToList();
        }
        
        // Apply search filter
        if (!string.IsNullOrEmpty(searchText))
        {
            var search = searchText.ToLower();
            filteredFarms = filteredFarms
                .Where(f => 
                    (f.Name?.ToLower().Contains(search) ?? false) ||
                    (f.Address?.ToLower().Contains(search) ?? false) ||
                    (f.District?.ToLower().Contains(search) ?? false) ||
                    (f.Province?.ToLower().Contains(search) ?? false) ||
                    (f.LocalAuthority?.ToLower().Contains(search) ?? false) ||
                    (f.Ward?.ToLower().Contains(search) ?? false)
                )
                .ToList();
        }
    }
    
    private void ClearFilters()
    {
        searchText = "";
        selectedProvince = "";
        selectedRegion = null;
        filteredFarms = farms;
    }
    
    private void RowSelectHandler(RowSelectEventArgs<FarmViewModel> args)
    {
        selectedFarm = args.Data;
    }
    
    private void OpenDeleteConfirmation(FarmViewModel farm)
    {
        selectedFarm = farm;
        isDeleteDialogVisible = true;
    }
    
    private async Task DeleteSelectedFarm()
    {
        if (selectedFarm == null) return;
        
        try
        {
            isDeleting = true;
            
            // Call API to delete farm
            var response = await ApiCall.Remove<ApiResponse<FarmViewModel>>(
                await ApiCall.GetHttpClient(), "Farms/DeleteFarm", selectedFarm.Id);
                
            if (response?.Status == (int)HttpStatusCode.OK)
            {
                Alert.Show($"Farm '{selectedFarm.Name}' deleted successfully", showTitle: true, toastType: ToastType.Success);
                
                // Refresh farms list
                await LoadFarms();
                
                // Close dialog
                isDeleteDialogVisible = false;
            }
            else
            {
                Alert.Show(response?.Title ?? "Error deleting farm", showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            Alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
        finally
        {
            isDeleting = false;
        }
    }
    
    private void NavigateToNewFarm()
    {
        NavigationManager.NavigateTo("/farms/new");
    }
    
    // Model for Region dropdown
    public class RegionModel
    {
        public Region? Region { get; set; }
        public string Name { get; set; }
        
        public RegionModel() { }
        
        public RegionModel(Region region)
        {
            Region = region;
            Name = $"Region {region}";
        }
    }
}