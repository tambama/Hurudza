@page "/farms/new"
@using System.Net
@using Hurudza.Common.Utils.Models
@using Hurudza.Data.UI.Models.ViewModels.Core
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@using Hurudza.Data.Enums.Enums
@using Hurudza.UI.Web.Models
@attribute [Authorize(Roles = "SystemAdministrator,Administrator")]
@implements IAsyncDisposable

@inject IApiCall ApiCall
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Create New Farm - Hurudza Farm Management</PageTitle>

@* Add MapBox CSS reference *@
<HeadContent>
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.css" rel="stylesheet" />
</HeadContent>

<Toast @ref="Alert" />

<div class="row">
    <div class="col-12">
        <div class="card mb-4">
            <div class="card-header pb-0">
                <div class="d-flex flex-row justify-content-between">
                    <div>
                        <h5 class="mb-0">Create New Farm</h5>
                        <p class="text-sm mb-0">Add a new farm to the system</p>
                    </div>
                    <div>
                        <button class="btn btn-secondary" @onclick="NavigateBack">
                            <i class="fas fa-arrow-left me-2"></i>Back to Farms
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <SfSpinner Size="50"></SfSpinner>
                        <p class="mt-3">Loading data...</p>
                    </div>
                }
                else
                {
                    <EditForm Model="@farm" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-12 mb-4">
                                <h6 class="text-uppercase text-body text-xs font-weight-bolder">Basic Information</h6>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-group">
                                    <label for="name">Farm Name <span class="text-danger">*</span></label>
                                    <InputText id="name" class="form-control" @bind-Value="farm.Name" />
                                    <ValidationMessage For="@(() => farm.Name)" />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-group">
                                    <label for="address">Address <span class="text-danger">*</span></label>
                                    <InputText id="address" class="form-control" @bind-Value="farm.Address" />
                                    <ValidationMessage For="@(() => farm.Address)" />
                                </div>
                            </div>
                        </div>

                        <!-- Rest of the form fields - omitted for brevity -->

                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    You can use the map below to select the farm location. Click on the map to set the coordinates.
                                </div>
                                <div id="location-map" style="height: 400px; width: 100%;" class="border rounded">
                                    <!-- Map will be loaded here -->
                                    <div class="d-flex justify-content-center align-items-center h-100">
                                        <button class="btn btn-primary" @onclick="LoadMap">
                                            <i class="fas fa-map-marker-alt me-2"></i>Load Map
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-4">
                            <div class="col-md-12 text-end">
                                <button type="button" class="btn btn-secondary me-2" @onclick="NavigateBack">Cancel</button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        <span>Creating Farm...</span>
                                    }
                                    else
                                    {
                                        <span>Create Farm</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private FarmViewModel farm = new FarmViewModel();
    private Toast Alert;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool mapLoaded = false;
    private DotNetObjectReference<FarmAdd> objRef;
    
    // JavaScript module reference
    private IJSObjectReference _mapModule;
    
    // Dropdown data sources
    private List<ProvinceViewModel> provinces = new();
    private List<DistrictViewModel> districts = new();
    private List<DistrictViewModel> allDistricts = new();
    private List<LocalAuthorityViewModel> localAuthorities = new();
    private List<LocalAuthorityViewModel> allLocalAuthorities = new();
    private List<WardViewModel> wards = new();
    private List<WardViewModel> allWards = new();
    
    // Enum items for dropdowns
    private List<EnumItem> regionItems = new();
    private List<EnumItem> conferenceItems = new();
    private List<EnumItem> terrainItems = new();
    private List<EnumItem> waterAvailabilityItems = new();
    private List<EnumItem> roadAccessItems = new();
    
    protected override async Task OnInitializedAsync()
    {
        // Set default values for the farm
        farm = new FarmViewModel
        {
            Year = DateTime.Now.Year,
            Region = Region.I,
            Conference = Conference.East,
            Terrain = Terrain.Flat,
            RoadAccess = RoadAccess.Dust,
            WaterAvailability = WaterAvailability.Seasonal,
            Latitude = -17.824858, // Default to Zimbabwe center
            Longitude = 31.053028
        };
        
        // Create a reference to this component for JS interop
        objRef = DotNetObjectReference.Create(this);
        
        await LoadEnumItems();
        await LoadLocations();
        await LoadJavaScriptModule();
        isLoading = false;
    }
    
    private async Task LoadJavaScriptModule()
    {
        try 
        {
            // Import the JavaScript module - similar to how Map.razor does it
            _mapModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", 
                "./Pages/Farms/FarmAdd.razor.js");
            
            Console.WriteLine("Farm Add JS module loaded successfully");
        }
        catch (Exception ex)
        {
            Alert?.Show($"Error loading map resources: {ex.Message}", showTitle: true, toastType: ToastType.Warning);
            Console.WriteLine($"Error loading JS module: {ex.Message}");
        }
    }
    
    private async Task LoadEnumItems()
    {
        try
        {
            // Load enum values for the dropdowns
            regionItems = ((Region[])Enum.GetValues(typeof(Region)))
                .Select(r => new EnumItem { Id = (int)r, Name = $"Region {r}" })
                .ToList();
                
            conferenceItems = ((Conference[])Enum.GetValues(typeof(Conference)))
                .Select(c => new EnumItem { Id = (int)c, Name = c.ToString() })
                .ToList();
                
            terrainItems = ((Terrain[])Enum.GetValues(typeof(Terrain)))
                .Select(t => new EnumItem { Id = (int)t, Name = t.ToString() })
                .ToList();
                
            waterAvailabilityItems = ((WaterAvailability[])Enum.GetValues(typeof(WaterAvailability)))
                .Select(w => new EnumItem { Id = (int)w, Name = w.ToString().Replace("YearRound", "Year-round") })
                .ToList();
                
            roadAccessItems = ((RoadAccess[])Enum.GetValues(typeof(RoadAccess)))
                .Select(r => new EnumItem { Id = (int)r, Name = r.ToString() })
                .ToList();
        }
        catch (Exception ex)
        {
            Alert?.Show($"Error loading dropdown options: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
    }

    private async Task LoadLocations()
    {
        try
        {
            // Load location data for the dropdowns
            var provincesResponse = await ApiCall.Get<List<ProvinceViewModel>>(
                await ApiCall.GetHttpClient(), "provinces/getprovinces");
            
            if (provincesResponse != null)
            {
                provinces = provincesResponse;
            }
            
            var districtsResponse = await ApiCall.Get<List<DistrictViewModel>>(
                await ApiCall.GetHttpClient(), "districts/getdistricts");
            
            if (districtsResponse != null)
            {
                districts = districtsResponse;
                allDistricts = new List<DistrictViewModel>(districts);
            }
            
            var localAuthoritiesResponse = await ApiCall.Get<List<LocalAuthorityViewModel>>(
                await ApiCall.GetHttpClient(), "localauthorities/getlocalauthorities");
            
            if (localAuthoritiesResponse != null)
            {
                localAuthorities = localAuthoritiesResponse;
                allLocalAuthorities = new List<LocalAuthorityViewModel>(localAuthorities);
            }
            
            var wardsResponse = await ApiCall.Get<List<WardViewModel>>(
                await ApiCall.GetHttpClient(), "wards/getwards");
            
            if (wardsResponse != null)
            {
                wards = wardsResponse;
                allWards = new List<WardViewModel>(wards);
            }
        }
        catch (Exception ex)
        {
            Alert?.Show($"Error loading location data: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
    }
    
    private void ProvinceChanged(ChangeEventArgs<string, ProvinceViewModel> args)
    {
        var provinceId = args.Value;
        
        // Reset dependent fields
        farm.DistrictId = null;
        farm.LocalAuthorityId = null;
        farm.WardId = null;
        
        // Filter districts by selected province
        if (!string.IsNullOrEmpty(provinceId))
        {
            districts = allDistricts
                .Where(d => d.ProvinceId == provinceId)
                .ToList();
        }
        else
        {
            districts = new List<DistrictViewModel>(allDistricts);
        }
        
        // Clear dependent dropdowns
        localAuthorities = new List<LocalAuthorityViewModel>();
        wards = new List<WardViewModel>();
    }
    
    private void DistrictChanged(ChangeEventArgs<string, DistrictViewModel> args)
    {
        var districtId = args.Value;
        
        // Reset dependent fields
        farm.LocalAuthorityId = null;
        farm.WardId = null;
        
        // Filter local authorities by selected district
        if (!string.IsNullOrEmpty(districtId))
        {
            localAuthorities = allLocalAuthorities
                .Where(l => l.DistrictId == districtId)
                .ToList();
                
            // Also filter wards by district
            wards = allWards
                .Where(w => w.DistrictId == districtId)
                .ToList();
        }
        else
        {
            localAuthorities = new List<LocalAuthorityViewModel>(allLocalAuthorities);
            wards = new List<WardViewModel>(allWards);
        }
    }
    
    private void LocalAuthorityChanged(ChangeEventArgs<string, LocalAuthorityViewModel> args)
    {
        var localAuthorityId = args.Value;
        
        // Reset dependent fields
        farm.WardId = null;
        
        // Filter wards by selected local authority
        if (!string.IsNullOrEmpty(localAuthorityId))
        {
            wards = allWards
                .Where(w => w.LocalAuthorityId == localAuthorityId)
                .ToList();
        }
        else if (!string.IsNullOrEmpty(farm.DistrictId))
        {
            // If local authority is cleared, filter by district instead
            wards = allWards
                .Where(w => w.DistrictId == farm.DistrictId)
                .ToList();
        }
        else
        {
            wards = new List<WardViewModel>(allWards);
        }
    }
    
    private async Task LoadMap()
    {
        if (mapLoaded || _mapModule == null)
            return;
            
        try
        {
            // Initialize the map using the imported module
            await _mapModule.InvokeVoidAsync("initializeMap", "location-map", 
                new double[] { farm.Longitude, farm.Latitude }, 6);
            
            // Add click handler for map using the module
            await _mapModule.InvokeVoidAsync("addMapClickHandler", "location-map", objRef);
            
            mapLoaded = true;
        }
        catch (Exception ex)
        {
            Alert?.Show($"Error loading map: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
    }
    
    // Method to be called from JavaScript when map is clicked
    [JSInvokable]
    public void UpdateCoordinates(double longitude, double latitude)
    {
        farm.Longitude = longitude;
        farm.Latitude = latitude;
        StateHasChanged();
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            
            // Set province, district, etc. properties based on selected IDs
            if (!string.IsNullOrEmpty(farm.ProvinceId))
            {
                var province = provinces.FirstOrDefault(p => p.Id == farm.ProvinceId);
                if (province != null)
                    farm.Province = province.Name;
            }
            
            if (!string.IsNullOrEmpty(farm.DistrictId))
            {
                var district = allDistricts.FirstOrDefault(d => d.Id == farm.DistrictId);
                if (district != null)
                    farm.District = district.Name;
            }
            
            if (!string.IsNullOrEmpty(farm.LocalAuthorityId))
            {
                var localAuthority = allLocalAuthorities.FirstOrDefault(l => l.Id == farm.LocalAuthorityId);
                if (localAuthority != null)
                    farm.LocalAuthority = localAuthority.Name;
            }
            
            if (!string.IsNullOrEmpty(farm.WardId))
            {
                var ward = allWards.FirstOrDefault(w => w.Id == farm.WardId);
                if (ward != null)
                    farm.Ward = ward.Name;
            }
            
            // Call API to create farm
            var response = await ApiCall.Add<Models.ApiResponse<FarmViewModel>, FarmViewModel>(
                await ApiCall.GetHttpClient(), "Farms/CreateFarm", farm);
                
            if (response?.Status == (int)HttpStatusCode.OK)
            {
                Alert?.Show("Farm created successfully", showTitle: true, toastType: ToastType.Success);
                await Task.Delay(1000); // Small delay to let user see the success message
                
                // Navigate to the new farm page
                if (response.Result?.Id != null)
                {
                    NavigationManager.NavigateTo($"/farm/{response.Result.Id}");
                }
                else
                {
                    NavigationManager.NavigateTo("/farms");
                }
            }
            else
            {
                Alert?.Show(response?.Title ?? "Error creating farm", showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            Alert?.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/farms");
    }
    
    public async ValueTask DisposeAsync()
    {
        try
        {
            // Clean up managed resources
            objRef?.Dispose();
            
            // Clean up the map if it was loaded
            if (mapLoaded && _mapModule != null)
            {
                await _mapModule.InvokeVoidAsync("disposeMap", "location-map");
            }
            
            // Dispose of the JS module
            if (_mapModule != null)
            {
                await _mapModule.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            // Log disposal exceptions
            Console.WriteLine($"Error during disposal: {ex.Message}");
        }
    }
}