@page "/crops"
@attribute [Authorize]

@using Hurudza.UI.Web.Components
@using Hurudza.UI.Web.Services
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@inject IApiCall ApiCall
@inject NavigationManager Navigation
@inject FarmAccessService FarmAccessService

<Toast @ref="Alert"/>

<div class="row">
    <div class="col-12">
        <div class="card mb-4">
            <div class="card-header pb-0">
                <div class="row">
                    <div class="col-md-8 d-flex align-items-center">
                        <h6>Crops</h6>
                    </div>
                    <div class="col-md-4 text-end">
                        <PermissionCheck Permission="@Claims.CropCreate">
                            <button class="btn btn-success btn-sm" @onclick="NavigateToCreateCrop">
                                <i class="fas fa-plus me-2"></i> Add Crop
                            </button>
                        </PermissionCheck>
                    </div>
                </div>
            </div>
            <div class="card-body px-2 pt-0 pb-2">
                @if (_loading)
                {
                    <div class="text-center py-4">
                        <SfSpinner></SfSpinner>
                    </div>
                }
                else if (_fieldCrops == null || !_fieldCrops.Any())
                {
                    <div class="text-center py-4">
                        <p class="text-muted mb-0">No crops found for your farms.</p>
                    </div>
                }
                else
                {
                    <SfGrid
                        DataSource="@_fieldCrops"
                        @ref="Grid"
                        AllowPaging="true"
                        AllowExcelExport="true"
                        AllowSorting="true"
                        AllowMultiSorting="true"
                        EnableStickyHeader="true"
                        AllowResizing="true"
                        AllowFiltering="true"
                        AllowSelection="true"
                        Toolbar="@(new List<string>() { "ExcelExport", "Print", "Search" })"
                        ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Copy", "ExcelExport", "Print", "FirstPage", "PrevPage", "LastPage", "NextPage" })">
                        <GridPageSettings PageSize="10"></GridPageSettings>
                        <GridFilterSettings Type="FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                        <GridEvents RowSelected="RowSelectHandler" TValue="FieldCropViewModel"></GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(FieldCropViewModel.Id) HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(FieldCropViewModel.Farm) HeaderText="Farm" TextAlign="TextAlign.Left" Width="140" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                            <GridColumn Field=@nameof(FieldCropViewModel.Field) HeaderText="Field" TextAlign="TextAlign.Left" Width="140" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                            <GridColumn Field=@nameof(FieldCropViewModel.Crop) HeaderText="Crop Type" TextAlign="TextAlign.Left" Width="140" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                            <GridColumn Field=@nameof(FieldCropViewModel.Size) HeaderText="Size (Ha)" TextAlign="TextAlign.Right" Width="100" Format="N2"></GridColumn>
                            <GridColumn Field=@nameof(FieldCropViewModel.PlantedDate) HeaderText="Planted Date" TextAlign="TextAlign.Center" Width="130" Format="yyyy-MM-dd" Type="ColumnType.Date"></GridColumn>
                            <GridColumn Field=@nameof(FieldCropViewModel.HarvestDate) HeaderText="Harvest Date" TextAlign="TextAlign.Center" Width="130" Format="yyyy-MM-dd" Type="ColumnType.Date"></GridColumn>
                            <GridColumn Field=@nameof(FieldCropViewModel.Irrigation) HeaderText="Irrigation" TextAlign="TextAlign.Center" Width="100">
                                <Template>
                                    @{
                                        var fieldCrop = (context as FieldCropViewModel);
                                        <span class="badge bg-@(fieldCrop.Irrigation ? "success" : "secondary")">
                                            @(fieldCrop.Irrigation ? "Yes" : "No")
                                        </span>
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center" Width="100">
                                <Template>
                                    @{
                                        var fieldCrop = (context as FieldCropViewModel);
                                        <div>
                                            <a href="javascript:;" @onclick="() => NavigateToField(fieldCrop.FieldId)" class="btn btn-outline-primary btn-sm me-1" title="Manage">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a href="javascript:;" @onclick="() => NavigateToFieldDetails(fieldCrop.FieldId)" class="btn btn-outline-info btn-sm" title="View Field">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                        </div>
                                    }
                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            </div>
        </div>
    </div>
    
    <!-- Farm-specific Crop Summary Cards -->
    @if (_farmSummaries != null && _farmSummaries.Any())
    {
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Farm Crop Summaries</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var farm in _farmSummaries)
                        {
                            <div class="col-lg-4 col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-header pb-0 p-3">
                                        <h6 class="mb-0">@farm.Key</h6>
                                    </div>
                                    <div class="card-body p-3">
                                        <ul class="list-group">
                                            @foreach (var crop in farm.Value)
                                            {
                                                <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                                                    <div class="d-flex align-items-center">
                                                        <div class="icon icon-shape icon-sm me-3 bg-gradient-success shadow text-center">
                                                            <i class="ni ni-leaf-2 text-white opacity-10"></i>
                                                        </div>
                                                        <div class="d-flex flex-column">
                                                            <h6 class="mb-1 text-sm">@crop.Crop</h6>
                                                            <span class="text-xs">@crop.Size.ToString("N2") Ha</span>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex">
                                                        <button class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark" 
                                                                onclick="@(() => Navigation.NavigateTo($"/field/{crop.FieldId}/crops"))">
                                                            <i class="fas fa-arrow-right"></i>
                                                        </button>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    SfGrid<FieldCropViewModel> Grid;
    Toast Alert;
    
    private bool _loading = true;
    private List<FieldCropViewModel> _fieldCrops;
    private Dictionary<string, List<FieldCropViewModel>> _farmSummaries;
    private List<FarmListViewModel> _accessibleFarms;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        _loading = true;
        
        try
        {
            // Get accessible farms for the current user
            _accessibleFarms = await FarmAccessService.GetAccessibleFarms();
            
            if (_accessibleFarms.Any())
            {
                var allFarmCrops = new List<FieldCropViewModel>();
                
                // Get crops for each accessible farm
                foreach (var farm in _accessibleFarms)
                {
                    var farmCrops = await ApiCall.Get<IEnumerable<FieldCropViewModel>>(
                        await ApiCall.GetHttpClient(), $"fieldcrops/getfarmfieldcrops/{farm.Id}");
                    
                    if (farmCrops != null)
                    {
                        allFarmCrops.AddRange(farmCrops);
                    }
                }
                
                _fieldCrops = allFarmCrops;
                
                // Group crops by farm for summary display
                _farmSummaries = _fieldCrops
                    .GroupBy(c => c.Farm)
                    .ToDictionary(
                        g => g.Key,
                        g => g.ToList()
                    );
            }
            else
            {
                _fieldCrops = new List<FieldCropViewModel>();
                _farmSummaries = new Dictionary<string, List<FieldCropViewModel>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading crops data: {ex.Message}");
            Alert.Show("Failed to load crops data. Please try again later.", 
                showTitle: true, title: "Error", toastType: ToastType.Danger);
            
            _fieldCrops = new List<FieldCropViewModel>();
            _farmSummaries = new Dictionary<string, List<FieldCropViewModel>>();
        }
        finally
        {
            _loading = false;
        }
    }
    
    private void RowSelectHandler(RowSelectEventArgs<FieldCropViewModel> args)
    {
        var selectedCrop = args.Data;
        NavigateToFieldCrops(selectedCrop.FieldId);
    }
    
    // Navigation methods
    private void NavigateToCreateCrop()
    {
        Navigation.NavigateTo("/crops/create");
    }
    
    private void NavigateToField(string fieldId)
    {
        Navigation.NavigateTo($"/field/{fieldId}/crops");
    }
    
    private void NavigateToFieldDetails(string fieldId)
    {
        Navigation.NavigateTo($"/field/{fieldId}");
    }
    
    private void NavigateToFieldCrops(string fieldId)
    {
        Navigation.NavigateTo($"/field/{fieldId}/crops");
    }
}