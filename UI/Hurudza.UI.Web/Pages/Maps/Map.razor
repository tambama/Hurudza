@page "/"
@implements IAsyncDisposable
@using System.Collections.ObjectModel
@using System.Diagnostics
@using Microsoft.Extensions.Logging
@using SharpKml.Engine
@using System.Net.Http.Headers
@attribute [Authorize]

@inject IJSRuntime JS
@inject IApiCall ApiCall
@inject ILogger<Map> Logger
@inject NavigationManager Navigation

<HeadContent>
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.css" rel="stylesheet"/>
</HeadContent>

<style>
    .e-listview .e-list-item {
        color: black;
        background-color: white;
    }

    .e-listview .e-list-item.e-focused {
        color: white;
        background-color: black;
    }

    #container .e-listview {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
    }

    .sample {
        justify-content: center;
        min-height: 280px;
    }

    .vertical-center {
        align-items: center;
    }

    .padding {
        padding: 4px;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .margin {
        margin: 10px;
    }

    #map {
        width: 100%;
        height: 100%;
        min-height: 100vh;
    }

    .sidebar-container {
        width: 40%;
        padding: 8px;
        max-height: 100vh;
        overflow-y: auto;
        transition: all 0.3s ease;
        background-color: white;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    /* Style fix for list items to prevent text truncation */
    .e-list-item .e-list-content {
        white-space: normal !important;
        word-wrap: break-word !important;
        overflow: visible !important;
    }

    /* Ensure all list items have proper padding and spacing */
    .list-group-item {
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .sidebar-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .search-box {
        margin-bottom: 10px;
    }

    .list-container {
        max-height: calc(100vh - 100px);
        overflow-y: auto;
    }

    .panel-hidden {
        display: none;
    }
</style>

<Toast @ref="_alert"/>

<div style="height:100%;width:100%;display:flex;flex-direction:row">
    <!-- Farms List Panel -->
    <div class="sidebar-container @_showSchools">
        <div class="sidebar-header">
            <div>
                <h3>Schools</h3>
            </div>
            <div>
                <button class="btn bg-white btn-icon-only me-2" @onclick="ToggleFiltersModal" title="Filter Schools">
                    <i class="fa fa-filter"></i>
                </button>
                <button class="btn bg-white btn-icon-only" @onclick="ToggleSchools">
                    <i class="fa fa-plus"></i>
                </button>
            </div>
        </div>
        <div class="search-box input-group">
            <input type="text" class="form-control" placeholder="Search schools..." @bind-value="_searchTerm"
                   @bind-value:event="oninput" @onkeyup="FilterFarms">
            @if (!string.IsNullOrEmpty(_searchTerm))
            {
                <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
                    <i class="fa fa-times"></i>
                </button>
            }
        </div>
        <div class="list-container my-2">
            @if (_loading)
            {
                <div class="text-center py-4">
                    <SfSpinner></SfSpinner>
                    <p class="mt-2">Loading schools...</p>
                </div>
            }
            else if (_filteredFarms == null || !_filteredFarms.Any())
            {
                <div class="text-center py-4">
                    <p>No schools found.</p>
                </div>
            }
            else
            {
                <SfListView DataSource="@_filteredFarms" Height="calc(100vh - 150px)">
                    <ListViewFieldSettings TValue="FarmViewModel" Id="Id" Text="Name"></ListViewFieldSettings>
                    <ListViewTemplates TValue="FarmViewModel">
                        <Template>
                            @{
                                FarmViewModel farm = (FarmViewModel)context;
                                <div class="e-list-wrapper e-list-multi-line" @onclick="(e => OnFarmSelect(farm))">
                                    <div class="e-list-item-header text-truncate">@farm.Name</div>
                                </div>
                            }
                        </Template>
                    </ListViewTemplates>
                </SfListView>
            }
        </div>
    </div>

    <!-- Farm Details Panel -->
    <div class="sidebar-container @_showSchoolDetails">
        <div class="card h-100">
            <div class="card-header pb-0 p-3">
                <div class="row">
                    <div class="col-md-1 text-start">
                        <a href="javascript:;" @onclick="GoBackToList">
                            <i class="fas fa-arrow-left text-secondary text-sm" data-bs-toggle="tooltip"
                               data-bs-placement="top" aria-hidden="true" aria-label="Go Back"
                               data-bs-original-title="Go Back"></i><span class="sr-only">Go Back</span>
                        </a>
                    </div>
                    <div class="col-md-7 d-flex align-items-center">
                        <h6 class="mb-0">School Information</h6>
                    </div>
                    <div class="col-md-4 text-end">
                        <a href="javascript:;" @onclick="ShowEdit">
                            <i class="fas fa-user-edit text-secondary text-sm" data-bs-toggle="tooltip"
                               data-bs-placement="top" aria-hidden="true" aria-label="Edit Profile"
                               data-bs-original-title="Edit Profile"></i><span class="sr-only">Edit Profile</span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body p-3">
                <h5 class="mb-0">@_farm.Name</h5>
                <p class="text-sm">
                    @_farm.Description
                </p>
                <hr class="horizontal gray-light my-4">
                <ul class="list-group">
                    <li class="list-group-item border-0 ps-0 pt-0 text-sm">
                        <strong class="text-dark">Address:</strong>
                        <div style="word-wrap: break-word;">@_farm.Address</div>
                    </li>
                    <li class="list-group-item border-0 ps-0 pt-0 text-sm"><strong class="text-dark">Primary
                            Contact:</strong> &nbsp; @_farm.ContactPerson</li>
                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Mobile:</strong>
                        &nbsp; @_farm.PhoneNumber</li>
                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Email:</strong>
                        &nbsp; @_farm.Email</li>
                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Website:</strong>
                        &nbsp; @_farm.Website</li>
                </ul>
                <hr class="horizontal gray-light my-2">
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem>
                            <HeaderTemplate>
                                <div class="col-md-12 d-flex align-items-center">
                                    <h6 class="mb-0">Basic Information</h6>
                                </div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                <ul class="list-group">
                                    <li class="list-group-item border-0 ps-0 pt-0 text-sm"><strong
                                            class="text-dark">Province:</strong> &nbsp; @_farm.Province</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong
                                            class="text-dark">Region:</strong>
                                        &nbsp; @(_farm.Region?.ToString() ?? "Not specified")</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">District:</strong>
                                        &nbsp; @_farm.District</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Local
                                            Authority:</strong> &nbsp; @_farm.LocalAuthority</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong
                                            class="text-dark">Ward:</strong>
                                        &nbsp; @_farm.Ward</li>
                                </ul>
                            </ContentTemplate>
                        </AccordionItem>
                        <AccordionItem>
                            <HeaderTemplate>
                                <div class="col-md-12 d-flex align-items-center">
                                    <h6 class="mb-0">Farm Size</h6>
                                </div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                <ul class="list-group">
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Total
                                            Area:</strong>
                                        &nbsp; @_farm.Size ha
                                    </li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong
                                            class="text-dark">Arable:</strong>
                                        &nbsp; @_farm.Arable ha
                                    </li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong
                                            class="text-dark">Cleared:</strong>
                                        &nbsp; @_farm.Cleared ha
                                    </li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong
                                            class="text-dark">Terrain:</strong>
                                        &nbsp; @(_farm.Terrain?.ToString() ?? "Not specified")</li>
                                    <li class="list-group-item border-0 ps-0 pt-0 text-sm"><strong class="text-dark">Location:</strong>
                                        &nbsp; @_farm.Latitude, @_farm.Longitude</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Altitude:</strong>
                                        &nbsp; @_farm.Elevation m
                                    </li>
                                </ul>
                            </ContentTemplate>
                        </AccordionItem>
                        <AccordionItem>
                            <HeaderTemplate>
                                <div class="col-md-12 d-flex align-items-center">
                                    <h6 class="mb-0">Infrastructure</h6>
                                </div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                <ul class="list-group">
                                    <li class="list-group-item border-0 ps-0 pt-0 text-sm"><strong class="text-dark">Water
                                            Source:</strong>
                                        &nbsp; @_farm.WaterSource</li>
                                    <li class="list-group-item border-0 ps-0 pt-0 text-sm"><strong class="text-dark">Water
                                            Availability:</strong>
                                        &nbsp; @(_farm.WaterAvailability?.ToString() ?? "Not specified")</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Irrigation
                                            Systems:</strong>
                                        &nbsp; @_farm.IrrigationSystems</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Buildings:</strong>
                                        &nbsp; @_farm.Buildings</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Road
                                            Access:</strong>
                                        &nbsp; @(_farm.RoadAccess?.ToString() ?? "Not specified")</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Security:</strong>
                                        &nbsp; @_farm.SecurityMeasures</li>
                                </ul>
                            </ContentTemplate>
                        </AccordionItem>
                        <AccordionItem>
                            <HeaderTemplate>
                                <div class="col-md-12 d-flex align-items-center">
                                    <h6 class="mb-0">Land Use</h6>
                                </div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                <ul class="list-group">
                                    <li class="list-group-item border-0 ps-0 pt-0 text-sm"><strong class="text-dark">Past
                                            Crops:</strong>
                                        &nbsp; @_farm.PastCrops</li>
                                    <li class="list-group-item border-0 ps-0 pt-0 text-sm"><strong class="text-dark">Land
                                            Management:</strong>
                                        &nbsp; @_farm.LandManagementPractice</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Irrigation
                                            Systems:</strong>
                                        &nbsp; @_farm.IrrigationSystems</li>
                                    <li class="list-group-item border-0 ps-0 text-sm"><strong class="text-dark">Equipment:</strong>
                                        &nbsp; @_farm.Equipment</li>
                                </ul>
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
            </div>
        </div>
        <div class="col-12 text-center mt-1">
            <a class="btn bg-gradient-dark mb-0 text-end" href="javascript:;" @onclick="ShowFieldsList">Manage
                Fields</a>
        </div>
    </div>

    <!-- Fields List Panel -->
    <div class="sidebar-container @_showFields">
        <div class="card h-100">
            <div class="card-header pb-0 p-3">
                <div class="row">
                    <div class="col-md-1 text-start">
                        <a href="javascript:;" @onclick="GoBackToSchool">
                            <i class="fas fa-arrow-left text-secondary text-sm" data-bs-toggle="tooltip"
                               data-bs-placement="top" aria-hidden="true" aria-label="Go Back"
                               data-bs-original-title="Go Back"></i><span class="sr-only">Go Back</span>
                        </a>
                    </div>
                    <div class="col-md-7 d-flex align-items-center">
                        <h6 class="mb-0">Fields</h6>
                    </div>
                    <div class="col-md-4 text-end">
                        <a href="javascript:;" @onclick="ShowEditField" class="mx-4" title="Add Field">
                            <i class="fas fa-plus text-secondary text-sm" data-bs-toggle="tooltip"
                               data-bs-placement="top" aria-hidden="true" aria-label="Add Field"
                               data-bs-original-title="Add Field"></i><span class="sr-only">Add Field</span>
                        </a>
                        <a href="javascript:;" @onclick="ShowUploadFields" title="Upload KML">
                            <i class="fas fa-upload text-secondary text-sm" data-bs-toggle="tooltip"
                               data-bs-placement="top" aria-hidden="true" aria-label="Upload Fields File"
                               data-bs-original-title="Upload KML"></i><span class="sr-only">Upload KML</span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body p-3">
                <h5 class="mb-0">@_farm.Name</h5>
                <hr class="horizontal gray-light my-4">

                @if (_fields == null || !_fields.Any())
                {
                    <div class="text-center py-4">
                        <p>No fields found for this school.</p>
                        <button class="btn btn-sm btn-success" @onclick="ShowEditField">Add Field</button>
                    </div>
                }
                else
                {
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Search fields..."
                               @bind-value="_fieldSearchTerm" @bind-value:event="oninput" @onkeyup="FilterFields">
                        @if (!string.IsNullOrEmpty(_fieldSearchTerm))
                        {
                            <button class="btn btn-outline-secondary" type="button" @onclick="ClearFieldSearch">
                                <i class="fa fa-times"></i>
                            </button>
                        }
                    </div>

                    <SfListView DataSource="@_filteredFields" Height="calc(100vh - 240px)">
                        <ListViewFieldSettings TValue="FieldViewModel" Id="Id" Text="Name"></ListViewFieldSettings>
                        <ListViewTemplates TValue="FieldViewModel">
                            <Template>
                                @{
                                    FieldViewModel field = (FieldViewModel)context;
                                    <div class="e-list-wrapper e-list-multi-line"
                                         @onclick="(e => OnFieldSelect(field))">
                                        <div class="e-list-item-header text-truncate">@field.Name</div>
                                        <div class="e-list-content text-muted"
                                             style="white-space: normal; font-size: 12px;">
                                            <span>@field.SoilType.ToString() | @field.Size ha | @(field.Irrigation ? "Irrigated" : "Non-irrigated")</span>
                                        </div>
                                    </div>
                                }
                            </Template>
                        </ListViewTemplates>
                    </SfListView>
                }
            </div>
        </div>
    </div>

    <!-- Field Details Panel -->
    <div class="sidebar-container @_showFieldDetails">
        <div class="card h-100">
            <div class="card-header pb-0 p-3">
                <div class="row">
                    <div class="col-md-1 text-start">
                        <a href="javascript:;" @onclick="BackToFields">
                            <i class="fas fa-arrow-left text-secondary text-sm" data-bs-toggle="tooltip"
                               data-bs-placement="top" aria-hidden="true" aria-label="Go Back"
                               data-bs-original-title="Go Back"></i><span class="sr-only">Go Back</span>
                        </a>
                    </div>
                    <div class="col-md-7 d-flex align-items-center">
                        <h6 class="mb-0">Field Details</h6>
                    </div>
                    <div class="col-md-4 text-end">
                        <a href="javascript:;" @onclick="EditCurrentField">
                            <i class="fas fa-edit text-secondary text-sm" data-bs-toggle="tooltip"
                               data-bs-placement="top" aria-hidden="true" aria-label="Edit Field"
                               data-bs-original-title="Edit Field"></i><span class="sr-only">Edit Field</span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body p-3">
                <h5 class="mb-0">@_field.Name</h5>
                <hr class="horizontal gray-light my-4">
                <ul class="list-group">
                    <li class="list-group-item border-0 ps-0 pt-0 text-sm">
                        <strong class="text-dark">Description:</strong> &nbsp; @_field.Description
                    </li>
                    <li class="list-group-item border-0 ps-0 pt-0 text-sm">
                        <strong class="text-dark">Size:</strong> &nbsp; @_field.Size ha
                    </li>
                    <li class="list-group-item border-0 ps-0 text-sm">
                        <strong class="text-dark">Soil Type:</strong> &nbsp; @_field.SoilType.ToString()
                    </li>
                    <li class="list-group-item border-0 ps-0 text-sm">
                        <strong class="text-dark">Irrigation:</strong> &nbsp; @(_field.Irrigation ? "Yes" : "No")
                    </li>
                </ul>

                <div class="col-12 text-center mt-3 mb-3">
                    <a class="btn btn-sm btn-success me-2" href="/field/@_field.Id/crops">Manage Crops</a>
                    <button class="btn btn-sm btn-primary" @onclick="AddCoordinate">Add Coordinate</button>
                </div>

                @if (!string.IsNullOrEmpty(_currentCrop))
                {
                    <div class="alert alert-info">
                        <strong>Current Crop:</strong> @_currentCrop
                    </div>
                }

                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Expanded="true">
                            <HeaderTemplate>
                                <div class="col-md-12 d-flex align-items-center">
                                    <h6 class="mb-0">Coordinates (@_fieldLocations.Count)</h6>
                                </div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                @if (_fieldLocations == null || !_fieldLocations.Any())
                                {
                                    <div class="text-center py-3">
                                        <p>No coordinates defined for this field.</p>
                                        <button class="btn btn-sm btn-success" @onclick="AddCoordinate">Add Coordinate
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="list-container" style="max-height: 200px; overflow-y: auto;">
                                        <SfListView DataSource="@_fieldLocations">
                                            <ListViewFieldSettings TValue="FieldLocationViewModel" Id="Id"
                                                                   Text="Text"></ListViewFieldSettings>
                                            <ListViewTemplates TValue="FieldLocationViewModel">
                                                <Template>
                                                    @{
                                                        FieldLocationViewModel coordinate = (FieldLocationViewModel)context;
                                                        <div class="e-list-wrapper e-list-multi-line"
                                                             @onclick="(e => OnCoordinateSelect(coordinate))">
                                                            <div class="e-list-item-header">
                                                                @(string.IsNullOrEmpty(coordinate.Label) ? "Point" : coordinate.Label)
                                                            </div>
                                                            <div class="e-list-content text-muted">
                                                                <small>@coordinate.Latitude, @coordinate.Longitude</small>
                                                            </div>
                                                        </div>
                                                    }
                                                </Template>
                                            </ListViewTemplates>
                                        </SfListView>
                                    </div>
                                }

                                @if (_showCoordinateForm)
                                {
                                    <hr class="horizontal gray-light my-3">
                                    <h6 class="mb-3">@(_editingCoordinate ? "Edit Coordinate" : "Add Coordinate")</h6>

                                    <EditForm Model="@_fieldLocation" OnValidSubmit="@SaveFieldLocation">
                                        <DataAnnotationsValidator/>
                                        <ValidationSummary/>

                                        <SfTextBox ID="id" TValue="string" hidden="hidden"
                                                   @bind-Value="@(_fieldLocation.Id)"></SfTextBox>

                                        <div class="form-group mb-3">
                                            <label>Label (Optional)</label>
                                            <SfTextBox ID="label" TValue="string" @bind-Value="@(_fieldLocation.Label)"
                                                       Placeholder="Point Name (optional)"></SfTextBox>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label>Latitude</label>
                                            <SfNumericTextBox ID="latitude" TValue="double"
                                                              @bind-Value="@(_fieldLocation.Latitude)"
                                                              Decimals=7 Format="n7"
                                                              Placeholder="e.g. -17.8248"></SfNumericTextBox>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label>Longitude</label>
                                            <SfNumericTextBox ID="longitude" TValue="double"
                                                              @bind-Value="@(_fieldLocation.Longitude)"
                                                              Decimals=7 Format="n7"
                                                              Placeholder="e.g. 31.0530"></SfNumericTextBox>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label>Altitude (meters)</label>
                                            <SfNumericTextBox ID="altitude" TValue="double"
                                                              @bind-Value="@(_fieldLocation.Altitude)"
                                                              Decimals=2 Format="n2"
                                                              Placeholder="e.g. 1200"></SfNumericTextBox>
                                        </div>

                                        <div class="form-group d-flex justify-content-between">
                                            <button type="submit" class="btn btn-success">
                                                @(_editingCoordinate ? "Update" : "Add")
                                            </button>
                                            <button type="button" class="btn btn-secondary"
                                                    @onclick="CancelCoordinateEdit">
                                                Cancel
                                            </button>
                                        </div>
                                    </EditForm>
                                }
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
            </div>
        </div>
    </div>

    <!-- Add/Edit Farm Panel -->
    <div class="sidebar-container @_showAddSchool">
        <div class="sidebar-header">
            <div>
                @if (string.IsNullOrEmpty(_farm.Id))
                {
                    <h5>Add New School</h5>
                }
                else
                {
                    <h5>Edit School</h5>
                }
            </div>
            <button class="btn bg-white btn-icon-only" @onclick="CancelEdit">
                <i class="fa fa-times"></i>
            </button>
        </div>

        <div class="my-2">
            <EditForm Model="@_farm" OnValidSubmit="@SaveFarm">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <!-- Form content with many fields, abbreviated for readability -->
                <SfTextBox ID="id" TValue="string" hidden="hidden" @bind-Value="@(_farm.Id)"></SfTextBox>

                <div class="form-group mb-3">
                    <label>Name *</label>
                    <SfTextBox ID="name" TValue="string" @bind-Value="@(_farm.Name)"
                               Placeholder="School name" ValidateOnInput="true"></SfTextBox>
                    <ValidationMessage For="() => _farm.Name"/>
                </div>

                <div class="form-group mb-3">
                    <label>Address *</label>
                    <SfTextBox ID="address" TValue="string" @bind-Value="@(_farm.Address)"
                               Placeholder="Physical address" ValidateOnInput="true"></SfTextBox>
                    <ValidationMessage For="() => _farm.Address"/>
                </div>

                <!-- Only showing a few key fields for brevity, the actual form has many more -->
                <div class="form-group mb-3">
                    <label>Contact Person</label>
                    <SfTextBox ID="contactPerson" TValue="string" @bind-Value="@(_farm.ContactPerson)"
                               Placeholder="e.g. John Doe"></SfTextBox>
                </div>

                <div class="form-group mb-3">
                    <label>Phone Number *</label>
                    <SfTextBox ID="phone" TValue="string" @bind-Value="@(_farm.PhoneNumber)"
                               Placeholder="e.g. 0771234567" ValidateOnInput="true"></SfTextBox>
                    <ValidationMessage For="() => _farm.PhoneNumber"/>
                </div>

                <div class="form-group mb-3">
                    <label>Email *</label>
                    <SfTextBox ID="email" TValue="string" @bind-Value="@(_farm.Email)"
                               Placeholder="e.g. school@example.com" ValidateOnInput="true"></SfTextBox>
                    <ValidationMessage For="() => _farm.Email"/>
                </div>

                <!-- Location fields -->
                <div class="form-group mb-3">
                    <label>Latitude</label>
                    <SfNumericTextBox ID="latitude" TValue="double" @bind-Value="@(_farm.Latitude)"
                                      Decimals=7 Format="n7" Placeholder="e.g. -17.8248"></SfNumericTextBox>
                </div>

                <div class="form-group mb-3">
                    <label>Longitude</label>
                    <SfNumericTextBox ID="longitude" TValue="double" @bind-Value="@(_farm.Longitude)"
                                      Decimals=7 Format="n7" Placeholder="e.g. 31.0530"></SfNumericTextBox>
                </div>

                <!-- Other form fields would go here -->

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-lg bg-gradient-success w-100 mb-3">Save</button>
                    <button type="button" class="btn btn-lg bg-gradient-secondary w-100" @onclick="CancelEdit">Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Add/Edit Field Panel -->
    <div class="sidebar-container @_showFieldEdit">
        <div class="sidebar-header">
            <div>
                @if (string.IsNullOrEmpty(_fieldEdit.Id))
                {
                    <h5>Add New Field</h5>
                }
                else
                {
                    <h5>Edit Field</h5>
                }
            </div>
            <button class="btn bg-white btn-icon-only" @onclick="BackToFields">
                <i class="fa fa-times"></i>
            </button>
        </div>

        <div class="my-2">
            <EditForm Model="@_fieldEdit" OnValidSubmit="@SaveField">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <SfTextBox ID="fieldId" TValue="string" hidden="hidden" @bind-Value="@(_fieldEdit.Id)"></SfTextBox>
                <SfTextBox ID="farmId" TValue="string" hidden="hidden" @bind-Value="@(_fieldEdit.FarmId)"></SfTextBox>

                <div class="form-group mb-3">
                    <label>Name *</label>
                    <SfTextBox ID="fieldName" TValue="string" @bind-Value="@(_fieldEdit.Name)"
                               Placeholder="Field name" ValidateOnInput="true"></SfTextBox>
                    <ValidationMessage For="() => _fieldEdit.Name"/>
                </div>

                <div class="form-group mb-3">
                    <label>Description</label>
                    <SfTextBox Multiline="true" ID="fieldDescription" TValue="string"
                               @bind-Value="@(_fieldEdit.Description)"
                               Placeholder="Field description"></SfTextBox>
                </div>

                <div class="form-group mb-3">
                    <label>Size (Hectares) *</label>
                    <SfNumericTextBox ID="fieldSize" TValue="float" @bind-Value="@(_fieldEdit.Size)" Decimals=2
                                      Format="n2" Placeholder="e.g. 5.75"></SfNumericTextBox>
                    <ValidationMessage For="() => _fieldEdit.Size"/>
                </div>

                <div class="form-group mb-3">
                    <label>Soil Type</label>
                    <SfDropDownList ID="soilType" TValue="SoilType" TItem="SoilTypeModel"
                                    @bind-Value="@(_fieldEdit.SoilType)" PopupHeight="350px" PopupWidth="350px"
                                    Placeholder="Select Soil Type" DataSource="@_soilTypes">
                        <DropDownListFieldSettings Value="SoilType" Text="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>

                <div class="form-group mb-3">
                    <SfCheckBox Label="Under Irrigation" @bind-Checked="@(_fieldEdit.Irrigation)"></SfCheckBox>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-lg bg-gradient-success w-100 mb-3">Save</button>
                    <button type="button" class="btn btn-lg bg-gradient-secondary w-100" @onclick="BackToFields">
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Main Map Container -->
    <div id="map" @ref="_mapElement" style="width:100%" class="min-height-vh-100"></div>

    <!-- Dialogs -->
    <SfDialog Width="300px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@_showDeleteCoordinateDialog">
        <DialogTemplates>
            <Header>Delete Coordinate</Header>
            <Content>
                <p>Are you sure you want to delete this coordinate?</p>
                @if (!string.IsNullOrEmpty(_fieldLocation.Label))
                {
                    <p><strong>@_fieldLocation.Label</strong></p>
                }
                <p>Coordinates: @_fieldLocation.Latitude, @_fieldLocation.Longitude</p>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Delete" OnClick="@DeleteFieldCoordinate" CssClass="e-danger"/>
            <DialogButton Content="Cancel" IsPrimary="true" OnClick="@CancelDeleteCoordinate"/>
        </DialogButtons>
    </SfDialog>

    <SfDialog Width="400px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@_showUploadFieldsDialog">
        <DialogTemplates>
            <Header>Upload KML File</Header>
            <Content>
                <p class="mb-3">Upload a KML file to import field boundaries.</p>

                <EditForm Model="_kml" OnValidSubmit="@SaveKmlFile">
                    <div class="form-group mb-3">
                        <label>Select KML File</label>
                        <InputFile OnChange="LoadKmlFiles" class="form-control" accept=".kml"/>

                        @if (_loadedKmlFile != null)
                        {
                            <div class="alert alert-info mt-2">
                                Selected file: @_loadedKmlFile.Name (@(_loadedKmlFile.Size / 1024) KB)
                            </div>
                        }
                    </div>

                    <div class="form-group">
                        @if (_loadingKml)
                        {
                            <SfSpinner></SfSpinner>
                            <p class="text-center mt-2">Processing...</p>
                        }
                    </div>

                    <div class="text-center mt-3">
                        <button type="submit" class="btn btn-success"
                                disabled="@(_loadedKmlFile == null || _loadingKml)">Upload
                        </button>
                        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseKmlUploadDialog">Cancel
                        </button>
                    </div>
                </EditForm>
            </Content>
        </DialogTemplates>
    </SfDialog>

    <!-- Filters Modal -->
    <SfDialog Width="500px" Height="600px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@ShowFiltersModal">
        <DialogTemplates>
            <Header>Filter Schools</Header>
            <Content>
                <div class="container">
                    <EditForm Model="@_filterModel" OnValidSubmit="@ApplyFilters">
                        <!-- Province Filter -->
                        <div class="form-group mb-3">
                            <label>Province</label>
                            <SfDropDownList TValue="string" TItem="ProvinceViewModel"
                                            @bind-Value="@_filterModel.ProvinceId"
                                            DataSource="@_provinces"
                                            AllowFiltering="true"
                                            Placeholder="Select Province"
                                            FilterBarPlaceholder="Search province...">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="ProvinceViewModel"
                                                    ValueChange="ProvinceChangeHandler"></DropDownListEvents>
                            </SfDropDownList>
                        </div>

                        <!-- Region Filter -->
                        <div class="form-group mb-3">
                            <label>Region</label>
                            <SfDropDownList TValue="Region?" TItem="RegionModel"
                                            @bind-Value="@_filterModel.Region"
                                            DataSource="@_regions"
                                            AllowFiltering="true"
                                            Placeholder="Select Region">
                                <DropDownListFieldSettings Value="Region" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>

                        <!-- Conference Filter -->
                        <div class="form-group mb-3">
                            <label>Conference</label>
                            <SfDropDownList TValue="Conference?" TItem="ConferenceModel"
                                            @bind-Value="@_filterModel.Conference"
                                            DataSource="@_conferences"
                                            AllowFiltering="true"
                                            Placeholder="Select Conference">
                                <DropDownListFieldSettings Value="Conference" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>

                        <!-- Farm Size Range -->
                        <div class="form-group mb-3">
                            <label>Farm Size (hectares)</label>
                            <div class="d-flex align-items-center gap-2">
                                <SfNumericTextBox TValue="float?" @bind-Value="@_filterModel.MinSize"
                                                  Placeholder="Min Size"
                                                  Min="0"
                                                  Format="n1"
                                                  Step="1"
                                                  ShowSpinButton="false">
                                </SfNumericTextBox>
                                <span>to</span>
                                <SfNumericTextBox TValue="float?" @bind-Value="@_filterModel.MaxSize"
                                                  Placeholder="Max Size"
                                                  Min="0"
                                                  Format="n1"
                                                  Step="1"
                                                  ShowSpinButton="false">
                                </SfNumericTextBox>
                            </div>
                        </div>

                        <!-- District Filter (dependent on Province) -->
                        <div class="form-group mb-3">
                            <label>District</label>
                            <SfDropDownList TValue="string" TItem="DistrictViewModel"
                                            @bind-Value="@_filterModel.DistrictId"
                                            DataSource="@_districts"
                                            AllowFiltering="true"
                                            Enabled="@(!string.IsNullOrEmpty(_filterModel.ProvinceId))"
                                            Placeholder="@(string.IsNullOrEmpty(_filterModel.ProvinceId) ? "Select Province first" : "Select District")">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="DistrictViewModel"
                                                    ValueChange="DistrictChangeHandler"></DropDownListEvents>
                            </SfDropDownList>
                        </div>

                        <!-- Local Authority Filter (dependent on District) -->
                        <div class="form-group mb-3">
                            <label>Local Authority</label>
                            <SfDropDownList TValue="string" TItem="LocalAuthorityViewModel"
                                            @bind-Value="@_filterModel.LocalAuthorityId"
                                            DataSource="@_localAuthorities"
                                            AllowFiltering="true"
                                            Enabled="@(!string.IsNullOrEmpty(_filterModel.DistrictId))"
                                            Placeholder="@(string.IsNullOrEmpty(_filterModel.DistrictId) ? "Select District first" : "Select Local Authority")">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>

                        <!-- Applied Filters Display -->
                        @if (HasActiveFilters())
                        {
                            <div class="alert alert-info mt-4">
                                <strong>Active Filters:</strong>
                                <ul class="mb-0 mt-1">
                                    @if (!string.IsNullOrEmpty(_filterModel.ProvinceId))
                                    {
                                        var province = _provinces.FirstOrDefault(p => p.Id == _filterModel.ProvinceId)?.Name ?? "Unknown";
                                        <li>Province: @province</li>
                                    }
                                    @if (_filterModel.Region.HasValue)
                                    {
                                        <li>Region: @_filterModel.Region.Value</li>
                                    }
                                    @if (_filterModel.Conference.HasValue)
                                    {
                                        <li>Conference: @_filterModel.Conference.Value</li>
                                    }
                                    @if (_filterModel.MinSize.HasValue || _filterModel.MaxSize.HasValue)
                                    {
                                        <li>Size:
                                            @(_filterModel.MinSize.HasValue ? _filterModel.MinSize.Value.ToString("N1") + " ha" : "0 ha")
                                            to
                                            @(_filterModel.MaxSize.HasValue ? _filterModel.MaxSize.Value.ToString("N1") + " ha" : "unlimited")
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(_filterModel.DistrictId))
                                    {
                                        var district = _districts.FirstOrDefault(d => d.Id == _filterModel.DistrictId)?.Name ?? "Unknown";
                                        <li>District: @district</li>
                                    }
                                    @if (!string.IsNullOrEmpty(_filterModel.LocalAuthorityId))
                                    {
                                        var localAuthority = _localAuthorities.FirstOrDefault(l => l.Id == _filterModel.LocalAuthorityId)?.Name ?? "Unknown";
                                        <li>Local Authority: @localAuthority</li>
                                    }
                                </ul>
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-4">
                            <button type="submit" class="btn btn-primary">Apply Filters</button>
                            <button type="button" class="btn btn-secondary" @onclick="ResetFilters">Reset Filters
                            </button>
                        </div>
                    </EditForm>
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>

    <SfSpinner @ref="_spinnerRef" Size="40" Type="SpinnerType.Bootstrap" CssClass="global-spinner"
               Visible="false"></SfSpinner>
</div>

@code {

    // Map elements
    private ElementReference _mapElement;
    private IJSObjectReference? _mapModule;
    private IJSObjectReference? _mapInstance;

    // UI references
    private Toast _alert;
    private SfSpinner _spinnerRef;

    // Data models
    private List<FarmViewModel> _farms = new();
    private List<FarmViewModel> _filteredFarms = new();
    private FarmViewModel _farm = new FarmViewModel();
    private List<FieldViewModel> _fields = new();
    private List<FieldViewModel> _filteredFields = new();
    private CreateFieldViewModel _fieldEdit = new CreateFieldViewModel();
    private FieldViewModel _field = new FieldViewModel();
    private List<FieldLocationViewModel> _fieldLocations = new();
    private FieldLocationViewModel _fieldLocation = new FieldLocationViewModel();
    private FileViewModel _kml = new();
    private string _currentCrop = string.Empty;

    // Filter-related properties
    private bool _isCurrentlyFiltering = false;
    private bool ShowFiltersModal { get; set; } = false;
    private FarmFilterModel _filterModel = new FarmFilterModel();
    private List<FarmViewModel> _allFarms = new(); // Store all farms for filtering

    // UI state variables
    private bool _showDeleteCoordinateDialog = false;
    private bool _showUploadFieldsDialog = false;
    private bool _showCoordinateForm = false;
    private bool _editingCoordinate = false;
    private bool _loading = true;
    private bool _loadingKml = false;
    private string _searchTerm = string.Empty;
    private string _fieldSearchTerm = string.Empty;
    private IBrowserFile _loadedKmlFile;

    // Panel visibility state
    private string _showSchools = "";
    private string _showAddSchool = "panel-hidden";
    private string _showSchoolDetails = "panel-hidden";
    private string _showFields = "panel-hidden";
    private string _showFieldEdit = "panel-hidden";
    private string _showFieldDetails = "panel-hidden";

    // Reference data 
    private ObservableCollection<ProvinceViewModel> _provinces = new();
    private ObservableCollection<DistrictViewModel> _districts = new();
    private ObservableCollection<DistrictViewModel> _allDistricts = new();
    private ObservableCollection<LocalAuthorityViewModel> _localAuthorities = new();
    private ObservableCollection<LocalAuthorityViewModel> _allLocalAuthorities = new();
    private ObservableCollection<WardViewModel> _wards = new();
    private ObservableCollection<WardViewModel> _allWards = new();
    private List<RegionModel> _regions = Enum.GetValues<Region>().Select(x => new RegionModel(x)).ToList();
    private List<TerrainModel> _terrains = Enum.GetValues<Terrain>().Select(x => new TerrainModel(x)).ToList();
    private List<ConferenceModel> _conferences = Enum.GetValues<Conference>().Select(x => new ConferenceModel(x)).ToList();
    private List<WaterAvailabilityModel> _waterAvailabilities = Enum.GetValues<WaterAvailability>().Select(x => new WaterAvailabilityModel(x)).ToList();
    private List<RoadAccessModel> _roadAccess = Enum.GetValues<RoadAccess>().Select(x => new RoadAccessModel(x)).ToList();
    private List<SoilTypeModel> _soilTypes = Enum.GetValues<SoilType>().Select(x => new SoilTypeModel(x)).ToList();

    #region Form Methods

    private async Task SaveFarm()
    {
        try
        {
            await ShowSpinner();

            UI.Shared.Models.ApiResponse<FarmViewModel> response;
            if (string.IsNullOrEmpty(_farm.Id))
            {
                response = await ApiCall.Add<UI.Shared.Models.ApiResponse<FarmViewModel>, FarmViewModel>(
                    await ApiCall.GetHttpClient(), "farms/createfarm", _farm);
            }
            else
            {
                response = await ApiCall.Update<UI.Shared.Models.ApiResponse<FarmViewModel>, FarmViewModel>(
                    await ApiCall.GetHttpClient(), "farms/updatefarm", _farm.Id, _farm);
            }

            if (response == null)
            {
                _alert.Show("Failed to save school, please try again!", showTitle: true, toastType: ToastType.Danger);
            }
            else if (response.Status == (int)HttpStatusCode.OK)
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Success);

                // Refresh farm list and select the saved farm
                await LoadFarms();

                if (response.Result != null)
                {
                    _farm = response.Result;
                    await OnFarmSelect(_farm);
                }
            }
            else
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            _alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error saving farm");
        }
        finally
        {
            await HideSpinner();
        }
    }

    private async Task SaveField()
    {
        try
        {
            await ShowSpinner();

            // Make sure the field is assigned to the current farm
            _fieldEdit.FarmId = _farm.Id;

            UI.Shared.Models.ApiResponse<FieldViewModel> response;

            if (string.IsNullOrEmpty(_fieldEdit.Id))
            {
                response = await ApiCall.Add<UI.Shared.Models.ApiResponse<FieldViewModel>, CreateFieldViewModel>(
                    await ApiCall.GetHttpClient(), "fields/createfield", _fieldEdit);
            }
            else
            {
                // Convert CreateFieldViewModel to FieldViewModel for update
                var updateField = new FieldViewModel
                {
                    Id = _fieldEdit.Id,
                    Name = _fieldEdit.Name,
                    Description = _fieldEdit.Description,
                    Size = _fieldEdit.Size,
                    SoilType = _fieldEdit.SoilType,
                    Irrigation = _fieldEdit.Irrigation,
                    FarmId = _fieldEdit.FarmId
                };

                response = await ApiCall.Update<UI.Shared.Models.ApiResponse<FieldViewModel>, FieldViewModel>(
                    await ApiCall.GetHttpClient(), "fields/updatefield", updateField.Id, updateField);
            }

            if (response == null)
            {
                _alert.Show("Failed to save field, please try again!", showTitle: true, toastType: ToastType.Danger);
            }
            else if (response.Status == (int)HttpStatusCode.OK)
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Success);

                // Refresh field list
                await LoadFields(_farm.Id);

                // Select the field if it's a new one
                if (string.IsNullOrEmpty(_fieldEdit.Id) && response.Result != null)
                {
                    await OnFieldSelect(response.Result);
                }
                else
                {
                    // Go back to fields list
                    await BackToFields();
                }
            }
            else
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            _alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error saving field");
        }
        finally
        {
            await HideSpinner();
        }
    }

    private async Task SaveFieldLocation()
    {
        try
        {
            await ShowSpinner();

            // Assign field ID
            _fieldLocation.FieldId = _field.Id;

            UI.Shared.Models.ApiResponse<FieldLocationViewModel> response;

            if (string.IsNullOrEmpty(_fieldLocation.Id))
            {
                // Create new coordinate
                response = await ApiCall.Add<UI.Shared.Models.ApiResponse<FieldLocationViewModel>, FieldLocationViewModel>(
                    await ApiCall.GetHttpClient(), "fieldLocations/createfieldLocation", _fieldLocation);
            }
            else
            {
                // Update existing coordinate
                response = await ApiCall.Update<UI.Shared.Models.ApiResponse<FieldLocationViewModel>, FieldLocationViewModel>(
                    await ApiCall.GetHttpClient(), "fieldLocations/updatefieldLocation", _fieldLocation.Id, _fieldLocation);
            }

            if (response == null)
            {
                _alert.Show("Failed to save coordinate, please try again!", showTitle: true, toastType: ToastType.Danger);
            }
            else if (response.Status == (int)HttpStatusCode.OK)
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Success);

                // Refresh field locations
                await LoadFieldLocations(_field.Id);

                // Refresh field boundaries on map
                await UpdateFieldOnMap(_field);

                // Reset form
                ResetCoordinateForm();
            }
            else
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            _alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error saving field location");
        }
        finally
        {
            await HideSpinner();
        }
    }

    private async Task SaveKmlFile()
    {
        try
        {
            await ShowSpinner();
            _loadingKml = true;

            if (_loadedKmlFile == null)
            {
                _alert.Show("Please select a KML file first.", showTitle: true, toastType: ToastType.Warning);
                return;
            }

            var ms = new MemoryStream();
            var fileStream = _loadedKmlFile.OpenReadStream();
            await fileStream.CopyToAsync(ms);

            var file = new FileViewModel(ms.ToArray(), farmId: _farm.Id);

            var response = await ApiCall.Add<UI.Shared.Models.ApiResponse<object>, FileViewModel>(
                await ApiCall.GetHttpClient(), "fieldlocations/UploadKmlData", file);

            if (response == null)
            {
                _alert.Show("Failed to import KML data, please try again!", showTitle: true, toastType: ToastType.Danger);
            }
            else if (response.Status == (int)HttpStatusCode.OK)
            {
                _alert.Show("KML data imported successfully", showTitle: true, toastType: ToastType.Success);

                // Close the dialog
                _showUploadFieldsDialog = false;

                // Refresh field list and map
                await OnFarmSelect(_farm);
            }
            else
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            _alert.Show($"Error importing KML: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error importing KML file");
        }
        finally
        {
            _loadingKml = false;
            await HideSpinner();
        }
    }

    private async Task LoadKmlFiles(InputFileChangeEventArgs e)
    {
        try
        {
            _loadingKml = true;

            var file = e.File;
            if (file != null)
            {
                if (!file.Name.EndsWith(".kml", StringComparison.OrdinalIgnoreCase))
                {
                    _alert.Show("Please select a valid KML file.", showTitle: true, toastType: ToastType.Warning);
                    _loadedKmlFile = null;
                    return;
                }

                _loadedKmlFile = file;

                // You might want to validate KML file here
                // For now we'll just show a success message
                _alert.Show($"File selected: {file.Name}", showTitle: false);
            }
        }
        catch (Exception ex)
        {
            _alert.Show($"Error selecting file: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error selecting KML file");
            _loadedKmlFile = null;
        }
        finally
        {
            _loadingKml = false;
        }
    }

    private async Task DeleteFieldCoordinate()
    {
        try
        {
            await ShowSpinner();

            var response = await ApiCall.Remove<UI.Shared.Models.ApiResponse<string>>(
                await ApiCall.GetHttpClient(), "fieldlocations/DeleteFieldLocation", _fieldLocation.Id);

            if (response == null)
            {
                _alert.Show("Failed to delete coordinate, please try again!", showTitle: true, toastType: ToastType.Danger);
            }
            else if (response.Status == (int)HttpStatusCode.OK)
            {
                _alert.Show("Coordinate deleted successfully", showTitle: true, toastType: ToastType.Success);

                // Remove from local list
                _fieldLocations.Remove(_fieldLocations.First(l => l.Id == _fieldLocation.Id));

                // Reset selection
                _fieldLocation = new FieldLocationViewModel();
                _showDeleteCoordinateDialog = false;

                // Refresh field on map (redraws polygon with updated coordinates)
                await UpdateFieldOnMap(_field);
            }
            else
            {
                _alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            _alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error deleting field coordinate");
        }
        finally
        {
            await HideSpinner();
        }
    }

    #endregion

    #region Event Handlers

    // Farm selection handler
    async Task OnFarmSelect(FarmViewModel farm)
    {
        try
        {
            await ShowSpinner();
            _farm = farm;

            // Get detailed farm information with field data
            var farmMap = await ApiCall.Get<FarmMapViewModel>(
                await ApiCall.GetHttpClient(), $"farms/GetFarmDetails/{_farm.Id}");

            // Update UI state
            _showSchools = "panel-hidden";
            _showAddSchool = "panel-hidden";
            _showSchoolDetails = "";
            _showFields = "panel-hidden";
            _showFieldEdit = "panel-hidden";
            _showFieldDetails = "panel-hidden";

            // Ensure UI state is updated before map operations
            //StateHasChanged();
            //await Task.Delay(150);

            if (_mapModule is not null)
            {
                // First clear the map completely
                await _mapModule.InvokeVoidAsync("clearMap", _mapInstance).AsTask();

                // Draw the farm boundary if available
                if (farmMap.IsPolygon)
                {
                    await _mapModule.InvokeVoidAsync("drawPolygon",
                        _mapInstance,
                        farm.Id,
                        farmMap.FarmPolygon,
                        false, // Not a field
                        farm.Name,
                        null, // No crop data for farm
                        true // Clear existing layers
                    ).AsTask();
                }

                // Draw all fields INSIDE the farm boundary
                foreach (var field in farmMap.Fields)
                {
                    await DrawFieldWithCropData(field);
                }

                // Always zoom in closely on the selected school
                int zoomLevel = 14; // Higher zoom level for better detail

                // If we have a farm boundary with meaningful coordinates, center on it
                if (farmMap.IsPolygon && farmMap.FarmCoordinates.Count > 0)
                {
                    // Calculate center of the farm polygon
                    double avgLat = farmMap.FarmCoordinates.Average(c => c[1]);
                    double avgLng = farmMap.FarmCoordinates.Average(c => c[0]);

                    // Center map with closer zoom
                    await _mapModule.InvokeVoidAsync("setMapCenter",
                        _mapInstance,
                        avgLat,
                        avgLng,
                        zoomLevel
                    ).AsTask();
                }
                // Otherwise, fall back to farm coordinates
                else if (farmMap.Latitude != 0 && farmMap.Longitude != 0)
                {
                    // Center the map on the farm coordinates with closer zoom
                    await _mapModule.InvokeVoidAsync("setMapCenter",
                        _mapInstance,
                        farmMap.Latitude,
                        farmMap.Longitude,
                        zoomLevel
                    ).AsTask();
                }
            }

            // Load fields for this farm
            await LoadFields(farm.Id);
        }
        catch (Exception ex)
        {
            _alert.Show($"Error displaying farm: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error selecting farm");
        }
        finally
        {
            await HideSpinner();
        }
    }

    // Field selection handler
    async Task OnFieldSelect(FieldViewModel field)
    {
        try
        {
            await ShowSpinner();
            _field = field;

            // Load field locations
            await LoadFieldLocations(field.Id);

            // Check for current crop data
            var fieldCrops = await ApiCall.Get<IEnumerable<FieldCropViewModel>>(
                await ApiCall.GetHttpClient(), $"fieldcrops/getfieldfieldcrops/{field.Id}");

            var currentCrop = fieldCrops?.OrderByDescending(c => c.PlantedDate).FirstOrDefault();
            if (currentCrop != null)
            {
                _currentCrop = $"{currentCrop.Crop} ({currentCrop.Size} ha, {(currentCrop.Irrigation ? "Irrigated" : "Non-irrigated")})";
                if (currentCrop.PlantedDate.HasValue)
                {
                    _currentCrop += $" - Planted: {currentCrop.PlantedDate.Value:d}";
                }
            }
            else
            {
                _currentCrop = string.Empty;
            }

            // Update UI state
            _showSchools = "panel-hidden";
            _showAddSchool = "panel-hidden";
            _showSchoolDetails = "panel-hidden";
            _showFields = "panel-hidden";
            _showFieldEdit = "panel-hidden";
            _showFieldDetails = "";

            // Ensure UI state is updated before map operations
            StateHasChanged();
            await Task.Delay(150);

            // Focus map on this field
            await UpdateFieldOnMap(field);
        }
        catch (Exception ex)
        {
            _alert.Show($"Error displaying field: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error selecting field");
        }
        finally
        {
            await HideSpinner();
        }
    }

    // Coordinate selection handler
    void OnCoordinateSelect(FieldLocationViewModel coordinate)
    {
        _fieldLocation = coordinate;
        _showDeleteCoordinateDialog = true;
    }

    // Dropdown event handlers
    public void ProvinceChangeHandler(ChangeEventArgs<string, ProvinceViewModel> args)
    {
        var districts = _allDistricts.Where(d => d.ProvinceId == args.Value).OrderBy(w => w.Name).ToList();
        _districts.Clear();

        try
        {
            foreach (var item in districts)
            {
                _districts.Add(item);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in ProvinceChangeHandler");
        }

        StateHasChanged();
    }

    public void DistrictChangeHandler(ChangeEventArgs<string, DistrictViewModel> args)
    {
        var localAuthorities = _allLocalAuthorities.Where(l => l.DistrictId == args.Value).OrderBy(w => w.Name).ToList();
        var wards = _allWards.Where(w => w.DistrictId == args.Value).OrderBy(w => w.Name).ToList();

        _localAuthorities.Clear();
        _wards.Clear();

        try
        {
            foreach (var item in localAuthorities)
            {
                _localAuthorities.Add(item);
            }

            foreach (var item in wards)
            {
                _wards.Add(item);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in DistrictChangeHandler");
        }

        StateHasChanged();
    }

    public void LocalAuthorityChangeHandler(ChangeEventArgs<string, LocalAuthorityViewModel> args)
    {
        var wards = _allWards.Where(w => w.LocalAuthorityId == args.Value).OrderBy(w => w.Name).ToList();
        _wards.Clear();

        try
        {
            foreach (var item in wards)
            {
                _wards.Add(item);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in LocalAuthorityChangeHandler");
        }

        StateHasChanged();
    }

    // Search filtering
    void ToggleFiltersModal()
    {
        ShowFiltersModal = !ShowFiltersModal;
    }

    bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(_filterModel.ProvinceId) ||
               _filterModel.Region.HasValue ||
               _filterModel.Conference.HasValue ||
               _filterModel.MinSize.HasValue ||
               _filterModel.MaxSize.HasValue ||
               !string.IsNullOrEmpty(_filterModel.DistrictId) ||
               !string.IsNullOrEmpty(_filterModel.LocalAuthorityId);
    }

    async Task ApplyFilters()
    {
        // Prevent multiple simultaneous filter operations
        if (_isCurrentlyFiltering) return;

        _isCurrentlyFiltering = true;
        await ShowSpinner();
        try
        {
            // Start with all farms
            _filteredFarms = _allFarms.ToList();

            // Apply Province filter
            if (!string.IsNullOrEmpty(_filterModel.ProvinceId))
            {
                _filteredFarms = _filteredFarms
                    .Where(f => f.ProvinceId == _filterModel.ProvinceId)
                    .ToList();
            }

            // Apply Region filter
            if (_filterModel.Region.HasValue)
            {
                _filteredFarms = _filteredFarms
                    .Where(f => f.Region == _filterModel.Region.Value)
                    .ToList();
            }

            // Apply Conference filter
            if (_filterModel.Conference.HasValue)
            {
                _filteredFarms = _filteredFarms
                    .Where(f => f.Conference == _filterModel.Conference.Value)
                    .ToList();
            }

            // Apply Size range filter
            if (_filterModel.MinSize.HasValue)
            {
                _filteredFarms = _filteredFarms
                    .Where(f => f.Size >= _filterModel.MinSize.Value)
                    .ToList();
            }

            if (_filterModel.MaxSize.HasValue)
            {
                _filteredFarms = _filteredFarms
                    .Where(f => f.Size <= _filterModel.MaxSize.Value)
                    .ToList();
            }

            // Apply District filter
            if (!string.IsNullOrEmpty(_filterModel.DistrictId))
            {
                _filteredFarms = _filteredFarms
                    .Where(f => f.DistrictId == _filterModel.DistrictId)
                    .ToList();
            }

            // Apply Local Authority filter
            if (!string.IsNullOrEmpty(_filterModel.LocalAuthorityId))
            {
                _filteredFarms = _filteredFarms
                    .Where(f => f.LocalAuthorityId == _filterModel.LocalAuthorityId)
                    .ToList();
            }

            // Close the modal
            ShowFiltersModal = false;

            // Store the filtered farms in a local variable to ensure we don't lose reference
            var currentFilteredFarms = _filteredFarms.ToList();

            // Now handle map updates with better state tracking
            if (_mapModule != null)
            {
                try
                {
                    // First clear the map completely and wait for completion
                    await _mapModule.InvokeVoidAsync("clearMap", _mapInstance).AsTask();

                    await Task.Delay(100);

                    // Create filtered GeoJSON for map
                    var validFarms = currentFilteredFarms.Where(f => f.Latitude != 0 && f.Longitude != 0).ToList();

                    Logger.LogInformation($"Preparing to show {validFarms.Count} filtered schools on map");

                    if (validFarms.Any())
                    {
                        var featureCollection = new
                        {
                            type = "FeatureCollection",
                            crs = new
                            {
                                type = "name",
                                properties = new
                                {
                                    name = "urn:ogc:def:crs:OGC:1.3:CRS84"
                                }
                            },
                            features = validFarms.Select(f => new
                            {
                                type = "Feature",
                                properties = new
                                {
                                    id = f.Id,
                                    name = f.Name,
                                    size = f.Size
                                },
                                geometry = new
                                {
                                    type = "Point",
                                    coordinates = new[] { f.Longitude, f.Latitude, f.Elevation }
                                }
                            }).ToArray()
                        };

                        // Load the clusters and WAIT for it to complete
                        Logger.LogInformation("Loading clusters on map with filtered data...");
                        await _mapModule.InvokeVoidAsync("loadFarms", _mapInstance, featureCollection).AsTask();

                        // IMPORTANT: Add a short delay to ensure the map has time to complete cluster rendering
                        await Task.Delay(100);

                        // Now adjust the zoom AFTER clusters are loaded
                        if (validFarms.Count > 1)
                        {
                            // Set zoom level based on number of farms
                            int zoomLevel = validFarms.Count > 0 ? 7 :
                                validFarms.Count > 10 ? 8 :
                                validFarms.Count > 5 ? 9 : 10;

                            double avgLat = validFarms.Average(f => f.Latitude);
                            double avgLng = validFarms.Average(f => f.Longitude);

                            Logger.LogInformation($"Setting map center to {avgLat}, {avgLng} with zoom {zoomLevel}");
                            await _mapModule.InvokeVoidAsync("setMapCenter",
                                _mapInstance,
                                avgLat,
                                avgLng,
                                zoomLevel).AsTask();
                        }
                        else if (validFarms.Count == 1)
                        {
                            Logger.LogInformation($"Zooming to single farm at {validFarms[0].Latitude}, {validFarms[0].Longitude}");
                            await _mapModule.InvokeVoidAsync("setMapCenter",
                                _mapInstance,
                                validFarms[0].Latitude,
                                validFarms[0].Longitude,
                                14).AsTask();
                        }
                    }
                    else
                    {
                        Logger.LogWarning("No valid farms to display after filtering");
                        // Default view for Zimbabwe if no valid farms
                        await _mapModule.InvokeVoidAsync("setMapCenter",
                            _mapInstance,
                            -17.824858,
                            31.053028,
                            7).AsTask();
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error updating map after filtering");
                    _alert.Show("Error updating map: " + ex.Message, showTitle: true, toastType: ToastType.Warning);
                }
            }

            // Filter applied success message
            _alert.Show($"Filtered to {_filteredFarms.Count} schools matching criteria", showTitle: true, toastType: ToastType.Success);
        }
        catch (Exception ex)
        {
            _alert.Show($"Error applying filters: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error applying filters");
        }
        finally
        {
            await HideSpinner();
            _isCurrentlyFiltering = false; // Reset the filter operation state
        }
    }

    async Task ResetFilters()
    {
        await ShowSpinner();
        try
        {
            // Reset filter model
            _filterModel = new FarmFilterModel();

            // Reset filtered farms to all farms
            _filteredFarms = _allFarms.ToList();

            // Reset map
            if (_mapModule != null)
            {
                await _mapModule.InvokeVoidAsync("clearMap", _mapInstance).AsTask();
                await Task.Delay(100);
                await LoadClusters();
            }

            ShowFiltersModal = false;
            _alert.Show("Filters reset successfully", showTitle: true, toastType: ToastType.Info);
        }
        catch (Exception ex)
        {
            _alert.Show($"Error resetting filters: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error resetting filters");
        }
        finally
        {
            await HideSpinner();
        }
    }

    void FilterFarms()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredFarms = _farms.ToList();
        }
        else
        {
            _filteredFarms = _farms
                .Where(f => f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            (f.Address?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }

        StateHasChanged();
    }

    void ClearSearch()
    {
        _searchTerm = string.Empty;
        FilterFarms();
    }

    void FilterFields()
    {
        if (string.IsNullOrWhiteSpace(_fieldSearchTerm))
        {
            _filteredFields = _fields.ToList();
        }
        else
        {
            _filteredFields = _fields
                .Where(f => f.Name.Contains(_fieldSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                            (f.Description?.Contains(_fieldSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }

        StateHasChanged();
    }

    void ClearFieldSearch()
    {
        _fieldSearchTerm = string.Empty;
        FilterFields();
    }

    #endregion

    #region Map Operations

    // Helper method to draw a field with its crop data on the map
    private async Task DrawFieldWithCropData(FieldViewModel field)
    {
        try
        {
            if (_mapModule == null) return;

            // Get crop data for this field
            var fieldCrops = await ApiCall.Get<IEnumerable<FieldCropViewModel>>(
                await ApiCall.GetHttpClient(), $"fieldcrops/getfieldfieldcrops/{field.Id}");

            var currentCrop = fieldCrops?.OrderByDescending(c => c.PlantedDate).FirstOrDefault();

            // Create crop data object if a crop exists
            object cropDataObj = null;
            if (currentCrop != null)
            {
                cropDataObj = new
                {
                    crop = currentCrop.Crop,
                    plantedDate = currentCrop.PlantedDate,
                    harvestDate = currentCrop.HarvestDate,
                    size = currentCrop.Size,
                    irrigation = currentCrop.Irrigation
                };
            }

            // Draw field with isField=true but clearExisting=false to maintain other layers
            await _mapModule.InvokeVoidAsync("drawPolygon",
                _mapInstance,
                field.Id,
                field.Coordinates,
                true, // This is a field
                field.Name,
                cropDataObj,
                false // Don't clear existing layers (keep farm boundary)
            ).AsTask();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error drawing field with crop data");
        }
    }

    // Updates a single field on the map (used when viewing field details)
    private async Task UpdateFieldOnMap(FieldViewModel field)
    {
        try
        {
            if (_mapModule == null) return;

            // This is similar to OnFieldSelect but focused on map operations

            // First draw the farm boundary (to establish the context)
            var farmMap = await ApiCall.Get<FarmMapViewModel>(
                await ApiCall.GetHttpClient(), $"farms/GetFarmDetails/{_farm.Id}");

            // Clear the map and draw farm boundary
            if (farmMap.IsPolygon)
            {
                await _mapModule.InvokeVoidAsync("drawPolygon",
                    _mapInstance,
                    _farm.Id,
                    farmMap.FarmPolygon,
                    false, // Not a field
                    _farm.Name,
                    null, // No crop data
                    true // Clear existing layers before drawing
                ).AsTask();
            }

            // Get crop data for this field
            var fieldCrops = await ApiCall.Get<IEnumerable<FieldCropViewModel>>(
                await ApiCall.GetHttpClient(), $"fieldcrops/getfieldfieldcrops/{field.Id}");

            var currentCrop = fieldCrops?.OrderByDescending(c => c.PlantedDate).FirstOrDefault();

            // Create crop data object if a crop exists
            object cropDataObj = null;
            if (currentCrop != null)
            {
                cropDataObj = new
                {
                    crop = currentCrop.Crop,
                    plantedDate = currentCrop.PlantedDate,
                    harvestDate = currentCrop.HarvestDate,
                    size = currentCrop.Size,
                    irrigation = currentCrop.Irrigation
                };
            }

            // Draw this field with highlight (above the farm boundary)
            await _mapModule.InvokeVoidAsync("drawPolygon",
                _mapInstance,
                field.Id,
                field.Coordinates,
                true, // This is a field
                field.Name,
                cropDataObj,
                false // Don't clear farm boundary
            ).AsTask();

            // Center map on field's average coordinates if available
            if (field.Locations.Any())
            {
                double avgLat = field.Locations.Average(l => l.Latitude);
                double avgLng = field.Locations.Average(l => l.Longitude);

                await _mapModule.InvokeVoidAsync("setMapCenter", _mapInstance, avgLat, avgLng, 16).AsTask();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating field on map");
        }
    }

    #endregion

    #region Navigation Functions

    // Panel control methods
    void ToggleSchools()
    {
        if (_showAddSchool == "panel-hidden")
        {
            // Switch to Add School view
            _showSchools = "panel-hidden";
            _showAddSchool = "";
            _showSchoolDetails = "panel-hidden";
            _showFields = "panel-hidden";
            _showFieldEdit = "panel-hidden";
            _showFieldDetails = "panel-hidden";

            // Reset farm model if adding new farm
            if (_farm != null && !string.IsNullOrEmpty(_farm.Id))
            {
                // Keep existing farm data for editing
            }
            else
            {
                _farm = new FarmViewModel();
            }
        }
        else
        {
            // Switch to Schools List view
            _showSchools = "";
            _showAddSchool = "panel-hidden";
            _showSchoolDetails = "panel-hidden";
            _showFields = "panel-hidden";
            _showFieldEdit = "panel-hidden";
            _showFieldDetails = "panel-hidden";
        }
    }

    async Task GoBackToList()
    {
        _farm = new FarmViewModel();
        _showSchools = "";
        _showAddSchool = "panel-hidden";
        _showSchoolDetails = "panel-hidden";
        _showFields = "panel-hidden";
        _showFieldEdit = "panel-hidden";
        _showFieldDetails = "panel-hidden";

        if (_mapModule != null)
        {
            await ResetFilters();
        }
    }

    void GoBackToSchool()
    {
        _showSchools = "panel-hidden";
        _showAddSchool = "panel-hidden";
        _showSchoolDetails = "";
        _showFields = "panel-hidden";
        _showFieldEdit = "panel-hidden";
        _showFieldDetails = "panel-hidden";
    }

    void ShowEdit()
    {
        _showSchools = "panel-hidden";
        _showAddSchool = "";
        _showSchoolDetails = "panel-hidden";
        _showFields = "panel-hidden";
        _showFieldEdit = "panel-hidden";
        _showFieldDetails = "panel-hidden";
    }

    void CancelEdit()
    {
        if (!string.IsNullOrEmpty(_farm.Id))
        {
            // Return to farm details for existing farm
            _showSchools = "panel-hidden";
            _showAddSchool = "panel-hidden";
            _showSchoolDetails = "";
            _showFields = "panel-hidden";
            _showFieldEdit = "panel-hidden";
            _showFieldDetails = "panel-hidden";
        }
        else
        {
            // Return to farm list for new farm
            _showSchools = "";
            _showAddSchool = "panel-hidden";
            _showSchoolDetails = "panel-hidden";
            _showFields = "panel-hidden";
            _showFieldEdit = "panel-hidden";
            _showFieldDetails = "panel-hidden";
        }
    }

    void ShowEditField()
    {
        _fieldEdit = new CreateFieldViewModel
        {
            FarmId = _farm.Id
        };

        _showSchools = "panel-hidden";
        _showAddSchool = "panel-hidden";
        _showSchoolDetails = "panel-hidden";
        _showFields = "panel-hidden";
        _showFieldEdit = "";
        _showFieldDetails = "panel-hidden";
    }

    void EditCurrentField()
    {
        // Convert the current field to CreateFieldViewModel for editing
        _fieldEdit = new CreateFieldViewModel
        {
            Id = _field.Id,
            Name = _field.Name,
            Description = _field.Description,
            Size = _field.Size,
            SoilType = _field.SoilType,
            Irrigation = _field.Irrigation,
            FarmId = _field.FarmId
        };

        _showSchools = "panel-hidden";
        _showAddSchool = "panel-hidden";
        _showSchoolDetails = "panel-hidden";
        _showFields = "panel-hidden";
        _showFieldEdit = "";
        _showFieldDetails = "panel-hidden";
    }

    async Task BackToFields()
    {
        await ShowSpinner();

        _showSchools = "panel-hidden";
        _showAddSchool = "panel-hidden";
        _showSchoolDetails = "panel-hidden";
        _showFields = "";
        _showFieldEdit = "panel-hidden";
        _showFieldDetails = "panel-hidden";

        // Reset coordinate form
        ResetCoordinateForm();

        // When going back to fields list, redraw the farm and all its fields
        if (_mapModule != null)
        {
            // Get farm details
            var farmMap = await ApiCall.Get<FarmMapViewModel>(
                await ApiCall.GetHttpClient(), $"farms/GetFarmDetails/{_farm.Id}");

            // Draw the farm boundary with clearExisting=true to clear the map first
            if (farmMap.IsPolygon)
            {
                await _mapModule.InvokeVoidAsync("drawPolygon",
                    _mapInstance,
                    _farm.Id,
                    farmMap.FarmPolygon,
                    false, // Not a field
                    _farm.Name,
                    null, // No crop data
                    true // Clear existing layers
                ).AsTask();
            }

            // Draw all fields inside the farm boundary
            foreach (var field in farmMap.Fields)
            {
                await DrawFieldWithCropData(field);
            }
        }

        await HideSpinner();
    }

    async Task ShowFieldsList()
    {
        await LoadFields(_farm.Id);

        _showSchools = "panel-hidden";
        _showAddSchool = "panel-hidden";
        _showSchoolDetails = "panel-hidden";
        _showFields = "";
        _showFieldEdit = "panel-hidden";
        _showFieldDetails = "panel-hidden";
    }

    void ShowUploadFields()
    {
        _showUploadFieldsDialog = true;
        _loadedKmlFile = null;
    }

    void CloseKmlUploadDialog()
    {
        _showUploadFieldsDialog = false;
        _loadedKmlFile = null;
    }

    void AddCoordinate()
    {
        _fieldLocation = new FieldLocationViewModel
        {
            FieldId = _field.Id
        };
        _showCoordinateForm = true;
        _editingCoordinate = false;
    }

    void CancelCoordinateEdit()
    {
        ResetCoordinateForm();
    }

    void ResetCoordinateForm()
    {
        _fieldLocation = new FieldLocationViewModel();
        _showCoordinateForm = false;
        _editingCoordinate = false;
    }

    void CancelDeleteCoordinate()
    {
        _showDeleteCoordinateDialog = false;
        _fieldLocation = new FieldLocationViewModel();
    }

    #endregion

    #region Data Loading Helpers

    // Ensure LoadFarms explicitly sets _allFarms
    private async Task LoadFarms()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            // Get farms from API
            _farms = (await ApiCall.Get<IEnumerable<FarmViewModel>>(
                await ApiCall.GetHttpClient(), "Farms/getFarms/")).ToList();

            // IMPORTANT: Store all farms for filtering - this must happen here
            _allFarms = new List<FarmViewModel>(_farms); // Use new list to avoid reference issues

            // Set filtered farms to all farms initially
            _filteredFarms = new List<FarmViewModel>(_farms); // Use new list to avoid reference issues

            Logger.LogInformation($"Loaded {_farms.Count} schools, {_farms.Count(f => f.Latitude != 0 && f.Longitude != 0)} with valid coordinates");
        }
        catch (Exception ex)
        {
            _alert.Show($"Error loading schools: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error loading farms");
            _farms = new List<FarmViewModel>();
            _filteredFarms = new List<FarmViewModel>();
            _allFarms = new List<FarmViewModel>();
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadFields(string farmId)
    {
        try
        {
            _fields = (await ApiCall.Get<IEnumerable<FieldViewModel>>(
                await ApiCall.GetHttpClient(), $"fields/getfarmfields/{farmId}")).ToList();

            _filteredFields = _fields.ToList();
        }
        catch (Exception ex)
        {
            _alert.Show($"Error loading fields: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error loading fields");
            _fields = new List<FieldViewModel>();
            _filteredFields = new List<FieldViewModel>();
        }
    }

    private async Task LoadFieldLocations(string fieldId)
    {
        try
        {
            _fieldLocations = (await ApiCall.Get<IEnumerable<FieldLocationViewModel>>(
                await ApiCall.GetHttpClient(), $"fieldLocations/getFieldLocationsByFieldId/{fieldId}")).ToList();
        }
        catch (Exception ex)
        {
            _alert.Show($"Error loading field locations: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error loading field locations");
            _fieldLocations = new List<FieldLocationViewModel>();
        }
    }

    private async Task LoadReferenceData()
    {
        try
        {
            _provinces = (await ApiCall.Get<ObservableCollection<ProvinceViewModel>>(
                await ApiCall.GetHttpClient(), "provinces/getprovinces"));

            _districts = (await ApiCall.Get<ObservableCollection<DistrictViewModel>>(
                await ApiCall.GetHttpClient(), "districts/getdistricts"));

            _allDistricts = new ObservableCollection<DistrictViewModel>(_districts);

            _localAuthorities = (await ApiCall.Get<ObservableCollection<LocalAuthorityViewModel>>(
                await ApiCall.GetHttpClient(), "localAuthorities/getLocalAuthorities"));

            _allLocalAuthorities = new ObservableCollection<LocalAuthorityViewModel>(_localAuthorities);

            _wards = (await ApiCall.Get<ObservableCollection<WardViewModel>>(
                await ApiCall.GetHttpClient(), "wards/getWards"));

            _allWards = new ObservableCollection<WardViewModel>(_wards);
        }
        catch (Exception ex)
        {
            _alert.Show($"Error loading reference data: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error loading reference data");
        }
    }

    private async Task LoadClusters()
    {
        try
        {
            if (_mapModule != null && _mapInstance != null)
            {
                // Make sure we have farm data
                if (_farms == null || !_farms.Any())
                {
                    Logger.LogInformation("No farms loaded yet, loading farms data for clusters");
                    await LoadFarms();
                }

                // Check again after loading
                if (_farms != null && _farms.Any())
                {
                    // Filter out farms with invalid coordinates (0,0 is often a default value)
                    var validFarms = _filteredFarms.Where(f => f.Latitude != 0 && f.Longitude != 0).ToList();

                    if (validFarms.Any())
                    {
                        Logger.LogInformation($"Creating map clusters with {validFarms.Count} schools");

                        // Create the GeoJSON FeatureCollection
                        var featureCollection = new
                        {
                            type = "FeatureCollection",
                            crs = new
                            {
                                type = "name",
                                properties = new
                                {
                                    name = "urn:ogc:def:crs:OGC:1.3:CRS84"
                                }
                            },
                            features = validFarms.Select(f => new
                            {
                                type = "Feature",
                                properties = new
                                {
                                    id = f.Id,
                                    name = f.Name,
                                    size = f.Size
                                },
                                geometry = new
                                {
                                    type = "Point",
                                    coordinates = new[] { f.Longitude, f.Latitude, f.Elevation }
                                }
                            }).ToArray()
                        };

                        // Load the clusters onto the map
                        await _mapModule.InvokeVoidAsync("loadFarms", _mapInstance, featureCollection).AsTask();

                        // Set appropriate zoom level based on number of farms
                        if (validFarms.Count > 1)
                        {
                            // Calculate appropriate zoom level: less zoom for more farms
                            int zoomLevel = validFarms.Count > 0 ? 7 :
                                validFarms.Count > 25 ? 7 :
                                validFarms.Count > 10 ? 8 : 9;

                            // Calculate the center point of all farms
                            double avgLat = validFarms.Average(f => f.Latitude);
                            double avgLng = validFarms.Average(f => f.Longitude);

                            // Center map at calculated position with appropriate zoom
                            await _mapModule.InvokeVoidAsync("setMapCenter",
                                _mapInstance,
                                avgLat,
                                avgLng,
                                zoomLevel).AsTask();
                        }
                        else if (validFarms.Count == 1)
                        {
                            // If there's only one farm, zoom in on it
                            await _mapModule.InvokeVoidAsync("setMapCenter",
                                _mapInstance,
                                validFarms[0].Latitude,
                                validFarms[0].Longitude,
                                14).AsTask();
                        }
                        else
                        {
                            // Default view if no valid farms (shouldn't happen but just in case)
                            await _mapModule.InvokeVoidAsync("setMapCenter",
                                _mapInstance,
                                -17.824858,
                                31.053028,
                                7).AsTask();
                        }
                    }
                    else
                    {
                        Logger.LogWarning("No valid farm coordinates found for map clusters");

                        // Set default view for Zimbabwe
                        await _mapModule.InvokeVoidAsync("setMapCenter",
                            _mapInstance,
                            -17.824858,
                            31.053028,
                            7).AsTask();
                    }
                }
                else
                {
                    Logger.LogWarning("No farms data available for map clusters");
                }
            }
            else
            {
                Logger.LogWarning("Map module or instance not initialized for loading clusters");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading map clusters");
            _alert.Show("Failed to load school locations on map", toastType: ToastType.Warning);
        }
    }

    // Helper methods for Spinner
    private async Task ShowSpinner()
    {
        if (_spinnerRef != null)
        {
            await _spinnerRef.ShowAsync();
        }
    }

    private async Task HideSpinner()
    {
        if (_spinnerRef != null)
        {
            await _spinnerRef.HideAsync();
        }
    }

    #endregion

    #region Page Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ShowSpinner();

            // Load reference data
            await LoadReferenceData();

            // Load farms data
            await LoadFarms();

            // Make sure _allFarms is populated here for filtering
            _allFarms = _farms.ToList();

            // Signal loading complete
            _loading = false;
        }
        catch (Exception ex)
        {
            _alert.Show($"Error initializing: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            Logger.LogError(ex, "Error in OnInitializedAsync");
        }
        finally
        {
            await HideSpinner();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize the map
                _mapModule = await JS.InvokeAsync<IJSObjectReference>("import",
                    "./Pages/Maps/Map.razor.js");

                if (_mapModule is not null)
                {
                    // Create and get map instance
                    _mapInstance = await _mapModule.InvokeAsync<IJSObjectReference>(
                        "addMapToElement", _mapElement);

                    // Important: Only load clusters once after initialization
                    // This ensures clusters are loaded on first render 
                    // and not accidentally called during other operations
                    await LoadClusters();
                }
            }
            catch (Exception ex)
            {
                _alert.Show($"Error initializing map: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
                Logger.LogError(ex, "Error in OnAfterRenderAsync");
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_mapInstance is not null)
        {
            await _mapInstance.DisposeAsync();
        }

        if (_mapModule is not null)
        {
            await _mapModule.DisposeAsync();
        }
    }

    #endregion
}