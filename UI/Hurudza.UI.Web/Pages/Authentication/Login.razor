@page "/authentication/login"
@using Hurudza.UI.Web.Cookie.Providers
@using Hurudza.UI.Shared.Api.Interfaces
@using Hurudza.UI.Shared.Models
@using Hurudza.UI.Web.Services
@using ApiResponses = Hurudza.UI.Shared.Models

@inject IApiCall ApiCall;
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService;
@inject JwtTokenService JwtService;

<div class="card card-plain">
    <div class="card-header pb-0 text-start">
        <h4 class="font-weight-bolder">Sign In</h4>
        <p class="mb-0">Enter your email and password to sign in</p>
    </div>
    <div class="card-body">
        <_ValidationSummary Errors="Errors"/>
        <EditForm role="form" Model="@_loginViewModel" OnValidSubmit="@UserLogin">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <InputText @bind-Value="_loginViewModel.Username" type="email" class="form-control form-control-lg" placeholder="Email" aria-label="Email" />
            </div>
            <div class="mb-3">
                <InputText @bind-Value="_loginViewModel.Password" type="password" class="form-control form-control-lg" placeholder="Password" aria-label="Password" />
            </div>
            <div class="form-check form-switch">
                <InputCheckbox @bind-Value="_loginViewModel.RememberMe" class="form-check-input" type="checkbox" id="rememberMe" />
                <label class="form-check-label" for="rememberMe">Remember me</label>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-lg bg-gradient-success btn-lg w-100 mt-4 mb-0">
                    @if (IsLoggingIn)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span>Sign in</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
    <div class="card-footer text-center pt-0 px-lg-2 px-1">
        <p class="mb-4 text-sm mx-auto">
            Don't have an account?
            <a href="javascript:;" class="text-primary text-gradient font-weight-bold">Contact administrator</a>
        </p>
    </div>
</div>

@code {
    private readonly LoginViewModel _loginViewModel = new LoginViewModel();
    private List<string> Errors { get; set; } = new List<string>();
    private bool IsLoggingIn { get; set; } = false;

    private async Task UserLogin()
    {
        IsLoggingIn = true;
        Errors.Clear();

        try
        {
            var response =
                await ApiCall.Add<ApiResponses.ApiResponse<UserViewModel>, LoginViewModel>(await ApiCall.GetHttpClient(), "authentication/login",
                    _loginViewModel);

            if (response == null)
            {
                Errors.Add("Login failed. Please contact System Admin");
            }
            else
            {
                if (response.Status == (int)HttpStatusCode.OK)
                {
                    // Store token
                    await LocalStorageService.SetItemAsStringAsync("token", response.Result.Token);

                    // Set auth state with permissions
                    (AuthStateProvider as CustomAuthStateProvider)?.SetAuthInfo(response.Result);

                    // Store user ID for convenience
                    await LocalStorageService.SetItemAsStringAsync("userId", response.Result.Id);

                    // Log permissions for debugging
                    Console.WriteLine($"User has {response.Result.Permissions?.Count ?? 0} permissions");

                    // Navigate to home page
                    NavigationManager.NavigateTo("/", true);
                }
                else
                {
                    Errors.Add(response.Title);
                }
            }
        }
        catch (Exception ex)
        {
            Errors.Add($"Error: {ex.Message}");
        }
        finally
        {
            IsLoggingIn = false;
        }
    }
}