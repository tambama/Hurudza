@page "/field/{id}"

@using Hurudza.UI.Web.Pages.Fields.Components
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@implements IAsyncDisposable

@attribute [Authorize]

@inject IApiCall ApiCall
@inject IJSRuntime JS
@inject NavigationManager Navigation

<HeadContent>
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.css" rel="stylesheet" />
</HeadContent>

<style>
    #map {
        width: 100%;
        height: 300px;
        border-radius: 8px;
        position: relative;
    }

    /* Ensure control containers are visible */
    .mapboxgl-ctrl-top-right {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 2;
    }

    /* Make the fullscreen control more obvious */
    .mapboxgl-ctrl-fullscreen {
        background-color: white !important;
        width: 30px !important;
        height: 30px !important;
        border-radius: 4px !important;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1) !important;
    }

    /* Fullscreen specific styles */
    .mapboxgl-map.mapboxgl-fullscreen {
        width: 100% !important;
        height: 100vh !important;
        border-radius: 0 !important;
    }
</style>

<!-- Rest of the component remains unchanged -->

<Toast @ref="_alert" />

@if (_field == null)
{
    <SfSpinner Visible="true"></SfSpinner>
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="mb-4">@_field.Farm</h5>
                    <div class="row">
                        <div class="col-xl-5 col-lg-6 text-center">
                            <!-- Map container with proper dimensions -->
                            <div id="map" class="w-100 border-radius-lg shadow-lg mx-auto"></div>
                        </div>
                        <div class="col-lg-5 mx-auto">
                            <h3 class="mt-lg-0 mt-4">@_field.Name</h3>
                            <h6 class="mb-1 mt-0">Size: @_field.Size Ha</h6>
                            @if (_field.Irrigation)
                            {
                                <span class="badge badge-success">Irrigation</span>
                            }
                            else
                            {
                                <span class="badge badge-danger">No Irrigation</span>
                            }
                            <br>
                            <label class="mt-0">Description</label>
                            <p>
                                @_field.Description
                            </p>
                            <div class="row mt-0">
                                <div class="col-lg-6">
                                    <button class="btn bg-gradient-primary mb-0 mt-lg-auto w-100" type="button" name="button" @onclick="ShowEditDialog">Update Details</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <FieldCropDetails FieldId="@Id" />
                    <div class="row mt-5">
                        <div class="col-12">
                            <h5 class="ms-3">Crops</h5>
                            <div class="text-center mb-3">
                                <a href="/field/@Id/crops" class="btn btn-success">
                                    <i class="fas fa-seedling me-2"></i> Manage Crops
                                </a>
                            </div>
                            @if (_fields == null || !_fields.Any())
                            {
                                <div class="alert alert-info text-center">
                                    <p>No crops have been planted on this field.</p>
                                    <a href="/field/@Id/crops" class="btn btn-sm btn-success">Plant a Crop</a>
                                </div>
                            }
                            else
                            {
                                <SfGrid
                                    DataSource="@_fields"
                                    @ref="Grid"
                                    AllowPaging="true"
                                    AllowSorting="true"
                                    EnableStickyHeader="true">
                                    <GridColumns>
                                        <GridColumn Field=@nameof(FieldCropViewModel.Id) HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
                                        <GridColumn Field=@nameof(FieldCropViewModel.Crop) HeaderText="Crop" TextAlign="TextAlign.Center" Width="120" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                        <GridColumn Field=@nameof(FieldCropViewModel.Size) HeaderText="Size (Ha)" TextAlign="TextAlign.Center" Width="120" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                        <GridColumn Field=@nameof(FieldCropViewModel.Irrigation) HeaderText="Irrigated" TextAlign="TextAlign.Center" Width="120">
                                            <Template>
                                                @{
                                                    var field = (context as FieldCropViewModel);
                                                    <div class="template_checkbox">
                                                        @if (field.Irrigation)
                                                        {
                                                            <input type="checkbox" checked>
                                                        }
                                                        else
                                                        {
                                                            <input type="checkbox">
                                                        }
                                                    </div>
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn Field=@nameof(FieldCropViewModel.PlantedDate) HeaderText="Plant Date" TextAlign="TextAlign.Center" Width="120" Format="yyyy-MM-dd" Type="ColumnType.Date"></GridColumn>
                                        <GridColumn Field=@nameof(FieldCropViewModel.HarvestDate) HeaderText="Harvest Date" TextAlign="TextAlign.Center" Width="120" Format="yyyy-MM-dd" Type="ColumnType.Date"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<SfDialog @ref="EditFieldDialog" Visible="false" ShowCloseIcon="true" IsModal="true" Width="500px">
    <DialogEvents Closed="CloseEditDialog"></DialogEvents>
    <DialogTemplates>
        <Header>Edit Field Details</Header>
        <Content>
            <EditForm Model="@_fieldEdit" OnValidSubmit="@SaveField">
                <DataAnnotationsValidator />
                <div class="form-group mb-3">
                    <label>Name</label>
                    <SfTextBox @bind-Value="_fieldEdit.Name" Placeholder="Field name"></SfTextBox>
                    <ValidationMessage For="@(() => _fieldEdit.Name)" />
                </div>
                <div class="form-group mb-3">
                    <label>Description</label>
                    <SfTextBox @bind-Value="_fieldEdit.Description" Multiline="true" Placeholder="Field description"></SfTextBox>
                </div>
                <div class="form-group mb-3">
                    <label>Size (Hectares)</label>
                    <SfNumericTextBox @bind-Value="_fieldEdit.Size" Format="n2" Decimals="2" Placeholder="Field size"></SfNumericTextBox>
                    <ValidationMessage For="@(() => _fieldEdit.Size)" />
                </div>
                <div class="form-group mb-3">
                    <label>Soil Type</label>
                    <SfDropDownList @bind-Value="_fieldEdit.SoilType" TItem="SoilTypeModel" TValue="SoilType" DataSource="@_soilTypes">
                        <DropDownListFieldSettings Value="SoilType" Text="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="form-group mb-3">
                    <SfCheckBox @bind-Checked="_fieldEdit.Irrigation" Label="Is under Irrigation?"></SfCheckBox>
                </div>
                <div class="d-flex justify-content-end mt-4">
                    <button type="submit" class="btn btn-success me-2">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditDialog">Cancel</button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

@code
{
    [Parameter]
    public required string Id { get; set; }

    SfGrid<FieldCropViewModel> Grid;
    SfDialog EditFieldDialog;
    FieldViewModel _field = null;
    CreateFieldViewModel _fieldEdit = new();
    List<FieldCropViewModel> _fields;
    List<SoilTypeModel> _soilTypes = Enum.GetValues<SoilType>().Select(x => new SoilTypeModel(x)).ToList();
    
    private Toast _alert;
    private bool _loading = true;
    private IJSObjectReference _mapModule;
    private bool _mapInitialized = false;
    private System.Threading.Timer _mapInitTimer;
    private string _currentFieldId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _currentFieldId = Id;
            await LoadFieldData();
        }
        catch (Exception ex)
        {
            if (_alert != null)
            {
                _alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            }
            Navigation.NavigateTo("/fields");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Check if we're navigating to a different field
            if (_currentFieldId != Id)
            {
                _currentFieldId = Id;
                _mapInitialized = false; // Reset this flag to force map reinitialization
                await LoadFieldData();
            }
        }
        catch (Exception ex)
        {
            if (_alert != null)
            {
                _alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            }
        }
    }

    private async Task LoadFieldData()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            var response = await ApiCall.Get<UI.Shared.Models.ApiResponse<FieldViewModel>>(
                await ApiCall.GetHttpClient(), $"fields/getfield/{Id}");

            if (response != null && response.Status == (int)HttpStatusCode.OK)
            {
                _field = response.Result;
                
                // Load crop data if field exists
                if (_field != null)
                {
                    // Load crop data for this field
                    _fields = (await ApiCall.Get<IEnumerable<FieldCropViewModel>>(
                        await ApiCall.GetHttpClient(), $"fieldcrops/getfieldfieldcrops/{Id}")).ToList();
                    
                    // Prepare edit model
                    _fieldEdit = new CreateFieldViewModel
                    {
                        Id = _field.Id,
                        Name = _field.Name,
                        Description = _field.Description,
                        Size = _field.Size,
                        SoilType = _field.SoilType,
                        Irrigation = _field.Irrigation,
                        FarmId = _field.FarmId
                    };
                }
            }
            else
            {
                // Field not found or error
                if (_alert != null)
                {
                    _alert.Show("Failed to load field details", showTitle: true, toastType: ToastType.Danger);
                }
                Navigation.NavigateTo("/fields");
            }
        }
        catch (Exception ex)
        {
            if (_alert != null)
            {
                _alert.Show($"Error loading data: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            }
            throw;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            // Only load the JS module once
            if (firstRender)
            {
                // Load the JavaScript module
                _mapModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Fields/Field.razor.js");
            }
            
            // Always try to initialize the map if it's not initialized yet
            if (_field != null && _mapModule != null && !_mapInitialized)
            {
                // Check if map container exists in DOM
                await Task.Delay(300); // Short delay to ensure DOM is ready
                
                // Dispose previous timer if exists
                _mapInitTimer?.Dispose();
                
                // Start a new timer
                _mapInitTimer = new System.Threading.Timer(async _ => 
                {
                    await InvokeAsync(async () => 
                    {
                        await InitializeMap();
                    });
                }, null, 100, System.Threading.Timeout.Infinite);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            if (_alert != null)
            {
                _alert.Show($"Map initialization error: {ex.Message}", showTitle: true, toastType: ToastType.Warning);
            }
        }
    }
    
    private async Task InitializeMap()
    {
        try
        {
            if (_field == null || _mapModule == null || _mapInitialized)
            {
                return;
            }
            
            // Check if map is already initialized (in case we're calling this method multiple times)
            bool isAlreadyInitialized = false;
            try
            {
                isAlreadyInitialized = await JS.InvokeAsync<bool>("isMapInitialized");
            }
            catch
            {
                isAlreadyInitialized = false;
            }
            
            if (isAlreadyInitialized)
            {
                Console.WriteLine("Map already initialized, marking as initialized");
                _mapInitialized = true;
                return;
            }
            
            // Create default center coordinates
            double[] center = { 31.053028, -17.824858 }; // Default Zimbabwe coordinates
            
            // If field has coordinates, use those
            if (_field.Locations != null && _field.Locations.Any())
            {
                // Calculate center of field from locations
                double avgLat = _field.Locations.Average(l => l.Latitude);
                double avgLng = _field.Locations.Average(l => l.Longitude);
                center = new[] { avgLng, avgLat };
            }
            
            // Try to initialize the map - destroy any existing instance first
            await JS.InvokeVoidAsync("destroyMap");
            bool result = await JS.InvokeAsync<bool>("loadMap", center);
            
            if (result)
            {
                _mapInitialized = true;
                Console.WriteLine($"Map initialized successfully for field {_field.Id}");
                
                // Draw field boundary if coordinates exist
                if (_field.Locations != null && _field.Locations.Count >= 3)
                {
                    // Sort locations by created date and convert to coordinates
                    var coordinates = _field.Locations
                        .OrderBy(l => l.CreatedDate)
                        .Select(l => new[] { l.Longitude, l.Latitude })
                        .ToList();
                    
                    await Task.Delay(300); // Give map time to fully initialize
                    await JS.InvokeVoidAsync("drawFieldBoundary", coordinates, _field.Name);
                    Console.WriteLine($"Drew field boundary for {_field.Id} with {coordinates.Count} points");
                }
            }
            else
            {
                Console.WriteLine("Map initialization failed, will retry");
                // Retry after a delay
                _mapInitTimer?.Dispose();
                _mapInitTimer = new System.Threading.Timer(async _ => 
                {
                    await InvokeAsync(async () => 
                    {
                        await InitializeMap();
                    });
                }, null, 500, System.Threading.Timeout.Infinite);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing map: {ex.Message}");
            if (_alert != null)
            {
                _alert.Show($"Map initialization error: {ex.Message}", showTitle: true, toastType: ToastType.Warning);
            }
        }
    }

    private void ShowEditDialog()
    {
        EditFieldDialog.ShowAsync();
    }

    private void CloseEditDialog()
    {
        EditFieldDialog.HideAsync();
    }

    private async Task SaveField()
    {
        try
        {
            var response = await ApiCall.Update<UI.Shared.Models.ApiResponse<FieldViewModel>, CreateFieldViewModel>(
                await ApiCall.GetHttpClient(), "fields/updatefield", _fieldEdit.Id, _fieldEdit);

            if (response != null && response.Status == (int)HttpStatusCode.OK)
            {
                if (_alert != null)
                {
                    _alert.Show("Field updated successfully", showTitle: true, toastType: ToastType.Success);
                }
                
                // Update local field data
                _field.Name = _fieldEdit.Name;
                _field.Description = _fieldEdit.Description;
                _field.Size = _fieldEdit.Size;
                _field.SoilType = _fieldEdit.SoilType;
                _field.Irrigation = _fieldEdit.Irrigation;
                
                CloseEditDialog();
            }
            else
            {
                if (_alert != null)
                {
                    _alert.Show("Failed to update field", showTitle: true, toastType: ToastType.Danger);
                }
            }
        }
        catch (Exception ex)
        {
            if (_alert != null)
            {
                _alert.Show($"Error: {ex.Message}", showTitle: true, toastType: ToastType.Danger);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            // Dispose of the timer
            _mapInitTimer?.Dispose();
            _mapInitTimer = null;
            
            // Explicitly destroy the map when the component is disposed
            if (_mapModule != null)
            {
                await JS.InvokeVoidAsync("destroyMap");
            }
            
            if (_mapModule != null)
            {
                await _mapModule.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing resources: {ex.Message}");
        }
    }
}