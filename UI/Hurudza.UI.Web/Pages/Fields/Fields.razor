@page "/fields"
@attribute [Authorize]

@using SoilType = Hurudza.Data.Models.Enums.SoilType
@using Hurudza.UI.Web.Pages.Farms
@using Hurudza.Data.Models.ViewModels.Core
@using Hurudza.Data.Models.Models
@using Hurudza.UI.Shared.Api.Interfaces
@inject IApiCall ApiCall
@inject NavigationManager Navigation

<Toast @ref="Alert"/>

<div class="row">
    <div class="col-12">
        <div class="card mb-4">
            <div class="card-header pb-0">
                <h6>Fields</h6>
            </div>
            <div class="card-body px-2 pt-0 pb-2">
                <SfGrid
                    DataSource="@_fields"
                    @ref="Grid"
                    AllowPaging="true"
                    AllowExcelExport="true"
                    AllowSorting="true"
                    AllowMultiSorting="true"
                    EnableStickyHeader="true"
                    AllowResizing="true"
                    AllowFiltering="true"
                    AllowSelection="true"
                    Toolbar="@(new List<string>() { "Add", "ExcelExport", "Print", "Search" })"
                    ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Edit", "Delete", "Copy", "ExcelExport", "Print", "FirstPage", "PrevPage", "LastPage", "NextPage" })">
                    <GridPageSettings PageSize="12"></GridPageSettings>
                    <GridFilterSettings Type="FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                    <GridEvents OnActionBegin="ActionBeginHandler" RowSelected="RowSelectHandler" TValue="FieldViewModel"></GridEvents>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog">
                        <HeaderTemplate>
                            @{
                                var text = GetHeader((context as FieldViewModel));
                                <span>@text</span>
                            }
                        </HeaderTemplate>
                        <Validator>
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                        </Validator>
                        <Template>
                            @{
                                var Field = (context as FieldViewModel);
                                <div>
                                    <div class="form-row">
                                        <SfTextBox ID="id" TValue="string" hidden="hidden" @bind-Value="@(Field.Id)"></SfTextBox>
                                        <div class="form-group">
                                            <label>Farm</label>
                                            <SfComboBox ID="farm" TValue="string" TItem="FarmViewModel" @bind-Value="@(Field.FarmId)" PopupHeight="350px" PopupWidth="350px" Placeholder="Select a Farm" DataSource="@_farms">
                                                <ComboBoxEvents TItem="FarmViewModel" TValue="string"></ComboBoxEvents>
                                                <ComboBoxFieldSettings Value="Id" Text="Name"></ComboBoxFieldSettings>
                                            </SfComboBox>
                                        </div>
                                        <div class="form-group">
                                            <label>Field Name</label>
                                            <SfTextBox ID="name" TValue="string" @bind-Value="@(Field.Name)" ValidateOnInput="true"></SfTextBox>
                                            <ValidationMessage For="() => Field.Name"/>
                                        </div>
                                        <div class="form-group">
                                            <label>Description</label>
                                            <SfTextBox ID="name" TValue="string" @bind-Value="@(Field.Description)" Multiline="true" ValidateOnInput="true"></SfTextBox>
                                            <ValidationMessage For="() => Field.Description"/>
                                        </div>
                                        <div class="form-group">
                                            <label>Size (Hectares)</label>
                                            <SfNumericTextBox ID="size" TValue="float" @bind-Value="@(Field.Size)" Decimals=3 Format="n3" FloatLabelType="@FloatLabelType.Auto"></SfNumericTextBox>
                                            <ValidationMessage For="() => Field.Size"/>
                                        </div>
                                        <div class="form-group">
                                            <label>Soil Type</label>
                                            <SfDropDownList ID="region" TValue="SoilType" TItem="SoilTypeModel" @bind-Value="@(Field.SoilType)" PopupHeight="350px" PopupWidth="350px" Placeholder="Select a Soil Type" DataSource="@_regions">
                                                <DropDownListFieldSettings Value="SoilType" Text="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                        <div class="form-group">
                                            <SfCheckBox Label="Is under Irrigation?" @bind-Checked="@(Field.Irrigation)"></SfCheckBox>
                                        </div>
                                        <div class="form-group">
                                            <SfSpinner @ref="SaveSpinner"></SfSpinner>
                                        </div>
                                    </div>
                                </div>
                            }
                        </Template>
                    </GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(FieldViewModel.Id) HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
                        <GridColumn Field=@nameof(FieldViewModel.Farm) HeaderText="Farm" TextAlign="TextAlign.Center" Width="120" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                        <GridColumn Field=@nameof(FieldViewModel.Name) HeaderText="Name" TextAlign="TextAlign.Center" Width="120" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                        <GridColumn Field=@nameof(FieldViewModel.Description) HeaderText="Description" TextAlign="TextAlign.Center" Width="120" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                        <GridColumn Field=@nameof(FieldViewModel.Size) HeaderText="Size (Ha)" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(FieldViewModel.SoilType) HeaderText="Soil Type" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(FieldViewModel.Irrigation) HeaderText="Irrigation" Type="ColumnType.Boolean" TextAlign="TextAlign.Center" Width="120">
                            <Template>
                                @{
                                    var field = (context as FieldViewModel);
                                    <div class="template_checkbox">
                                        @if (field.Irrigation)
                                        {
                                            <input type="checkbox" checked>
                                        }
                                        else
                                        {
                                            <input type="checkbox">
                                        }
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
                <SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
                    <DialogEvents Closed="Closed"></DialogEvents>
                    <DialogTemplates>
                        <Header> Delete Record</Header>
                        <Content>
                            You are about to Delete a Record @SelectedField.Name?
                            <div class="form-group">
                                <SfSpinner @ref="DeleteSpinner"></SfSpinner>
                            </div>
                        </Content>
                    </DialogTemplates>
                    <DialogButtons>
                        <DialogButton OnClick="@OkClick" Content="OK" IsPrimary="true"></DialogButton>
                        <DialogButton OnClick="@CancelClick" Content="Cancel"></DialogButton>
                    </DialogButtons>
                </SfDialog>
            </div>
        </div>
    </div>
</div>

@code{
    SfGrid<FieldViewModel> Grid;
    SfDialog Dialog;
    SfSpinner SaveSpinner;
    SfSpinner DeleteSpinner;
    Toast Alert;
    List<FieldViewModel> _fields;
    List<FarmViewModel> _farms;
    List<Data.Models.Models.SoilTypeModel> _regions = Enum.GetValues<SoilType>().Select(x => new Data.Models.Models.SoilTypeModel(x)).ToList();
    bool Enabled = true;
    bool Data = false;
    FieldViewModel SelectedField;
    bool flag = true;
    ClaimsPrincipal Field;

    private string GetHeader(FieldViewModel Value)
    {
        if (string.IsNullOrEmpty(Value.Id))
        {
            return "Add New Field";
        }
        else
        {
            return "Edit Details of " + Value.Name;
        }
    }

    private void Closed()
    {
        flag = true;
    }

    private async Task ActionBeginHandler(ActionEventArgs<FieldViewModel> args)
    {
        switch (args.RequestType)
        {
            case Action.FilterChoiceRequest:
                args.FilterChoiceCount = 100;
                break;
            case Action.Add:
                Data = true;
                break;
            case Action.Delete when flag:
                args.Cancel = true;
                Dialog.Show();
                flag = false;
                break;
            case Action.Save:
            {
                if (SaveSpinner.Visible)
                {
                    args.Cancel = true;
                    break;
                }

                await SaveSpinner.ShowAsync();
                if (!string.IsNullOrEmpty(args.Data.Id))
                {
                    if (!await UpdateField(args.Data))
                    {
                        args.Cancel = true;
                    }
                }
                else
                {
                    if (!await SaveField(args.Data))
                    {
                        args.Cancel = true;
                    }
                }


                await SaveSpinner.HideAsync();
                break;
            }
        }
    }

    private void RowSelectHandler(RowSelectEventArgs<FieldViewModel> args)
    {
        SelectedField = args.Data;
        Navigation.NavigateTo($"/field/{SelectedField.Id}");
    }

    private async Task OkClick()
    {
        await DeleteSpinner.ShowAsync();
        if (await DeleteField(SelectedField))
        {
            await Grid.DeleteRecordAsync();
            await Dialog.HideAsync();
        }
        await DeleteSpinner.HideAsync();
    }

    private async Task CancelClick()
    {
        await Dialog.HideAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _fields = (await ApiCall.Get<IEnumerable<FieldViewModel>>(await ApiCall.GetHttpClient(), "Fields/getFields/")).ToList();
        _farms = (await ApiCall.Get<IEnumerable<FarmViewModel>>(await ApiCall.GetHttpClient(), "Farms/getFarms/")).ToList();
    }

    private async Task<bool> SaveField(FieldViewModel model)
    {
        var response = await ApiCall.Add<UI.Shared.Models.ApiResponse<FieldViewModel>, FieldViewModel>(await ApiCall.GetHttpClient(), "fields/createfield", model);

        if (response == null)
        {
            Alert.Show("Failed to save Field, please try again!", showTitle: true, toastType: ToastType.Danger);
        }
        else if (response.Status == (int)HttpStatusCode.OK)
        {
            Alert.Show(response.Title, showTitle: true, toastType: ToastType.Success);
            return true;
        }
        else
        {
            Alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
        }

        return false;
    }

    private async Task<bool> UpdateField(FieldViewModel model)
    {
        var response = await ApiCall.Update<UI.Shared.Models.ApiResponse<FieldViewModel>, FieldViewModel>(await ApiCall.GetHttpClient(), "Fields/updateField", model.Id, model);

        if (response == null)
        {
            Alert.Show("Failed to update Field, please try again!", showTitle: true, toastType: ToastType.Danger);
        }
        else if (response.Status == (int)HttpStatusCode.OK)
        {
            Alert.Show(response.Title, showTitle: true, toastType: ToastType.Success);
            return true;
        }
        else
        {
            Alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
        }

        return false;
    }

    private async Task<bool> DeleteField(FieldViewModel model)
    {
        var response = await ApiCall.Remove<UI.Shared.Models.ApiResponse<FieldViewModel>>(await ApiCall.GetHttpClient(), "Fields/deleteField", model.Id);

        if (response == null)
        {
            Alert.Show("Failed to delete Field, please try again!", showTitle: true, toastType: ToastType.Danger);
        }
        else if (response.Status == (int)HttpStatusCode.OK)
        {
            Alert.Show(response.Title, showTitle: true, toastType: ToastType.Success);
            return true;
        }
        else
        {
            Alert.Show(response.Title, showTitle: true, toastType: ToastType.Danger);
        }

        return false;
    }
}