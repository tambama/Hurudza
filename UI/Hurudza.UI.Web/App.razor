@using Hurudza.UI.Web.Cookie.Providers
@inject IApiCall ApiCall
@inject ILocalStorageService LocalStorageService;
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin/>
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code{
    // In App.razor, update the OnNavigateAsync method

    // In App.razor, update the OnNavigateAsync method

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            // Skip authentication check for login page and other public pages
            if (args.Path.StartsWith("/authentication/login") ||
                args.Path.StartsWith("/register") ||
                args.Path.StartsWith("/public"))
            {
                Console.WriteLine($"Navigating to public page: {args.Path}, skipping auth check");
                return;
            }

            // Check if we have a token in local storage
            var token = await LocalStorageService.GetItemAsync<string>("token");

            if (string.IsNullOrEmpty(token))
            {
                // No token found, redirect to login page
                Console.WriteLine("No token found, redirecting to login page");

                // Make sure we're not already on the login page to avoid redirect loops
                if (!Navigation.Uri.Contains("/authentication/login"))
                {
                    Navigation.NavigateTo("authentication/login", forceLoad: false);
                }

                return;
            }

            // Check if user is already authenticated via AuthStateProvider
            var authState = await (AuthStateProvider as CustomAuthStateProvider).GetAuthenticationStateAsync();
            var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (!isAuthenticated)
            {
                // We have a token but user isn't authenticated, try to get the profile
                var client = await ApiCall.GetHttpClient();
                var response = await ApiCall.Get<ApiResponse<UserViewModel>>(client, "authentication/getloggedinprofile/");

                if (response != null && response.Status == (int)HttpStatusCode.OK && response.Result != null)
                {
                    // Valid response with user profile, update auth state
                    (AuthStateProvider as CustomAuthStateProvider)?.SetAuthInfo(response.Result);
                    Console.WriteLine($"Successfully authenticated user: {response.Result.Fullname}");
                }
                else
                {
                    // Invalid or expired token, remove it and redirect to login
                    Console.WriteLine("Failed to authenticate with stored token, removing it");
                    await LocalStorageService.RemoveItemAsync("token");

                    // Make sure we're not already on the login page to avoid redirect loops
                    if (!Navigation.Uri.Contains("/authentication/login"))
                    {
                        Navigation.NavigateTo("authentication/login", forceLoad: false);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in authentication flow: {ex.Message}");
            // Remove the token if it's causing errors and redirect to login
            await LocalStorageService.RemoveItemAsync("token");

            // Make sure we're not already on the login page to avoid redirect loops
            if (!Navigation.Uri.Contains("/authentication/login"))
            {
                Navigation.NavigateTo("authentication/login", forceLoad: false);
            }
        }
    }

}