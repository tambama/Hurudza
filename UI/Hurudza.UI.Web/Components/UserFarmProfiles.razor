@namespace Hurudza.UI.Web.Components
@using Hurudza.Data.UI.Models.ViewModels.UserManagement
@using System.Net
@using IApiCall = Hurudza.UI.Web.Api.Interfaces.IApiCall
@inject IApiCall ApiCall
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService

<div class="farm-profile-switcher @(isLoading ? "loading" : "")">
    @if (isLoading)
    {
        <div class="text-center py-2">
            <div class="spinner-border spinner-border-sm text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (farmProfiles.Count == 0)
    {
        <div class="alert alert-info mb-0 py-2">
            <div class="d-flex align-items-center">
                <i class="fas fa-info-circle me-2"></i>
                <small>No farms assigned.</small>
            </div>
        </div>
    }
    else
    {
        <div class="profiles-list">
            @foreach (var profile in farmProfiles)
            {
                <div class="profile-item @(profile.LoggedIn ? "active" : "")" @onclick="() => SwitchProfile(profile)">
                    <div class="profile-info">
                        <div class="farm-name">@profile.Farm</div>
                        <div class="role-badge">
                            <span class="badge role-@profile.Role">@FormatRoleName(profile.Role)</span>
                        </div>
                    </div>
                    @if (profile.LoggedIn)
                    {
                        <div class="active-indicator">
                            <i class="fas fa-check-circle"></i>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private List<UserProfileViewModel> farmProfiles = new();
    private bool isLoading = true;
    private CustomAuthStateProvider authProvider => AuthStateProvider as CustomAuthStateProvider;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfiles();
    }

    private async Task LoadProfiles()
    {
        try
        {
            isLoading = true;

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? 
                        authState.User.FindFirst("UserId")?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                var response = await ApiCall.Get<ApiResponse<List<UserProfileViewModel>>>(
                    await ApiCall.GetHttpClient(), $"farmusers/getuserfarmprofiles?userId={userId}");

                if (response?.Status == (int)HttpStatusCode.OK && response.Result != null)
                {
                    farmProfiles = response.Result;
                    
                    // Ensure at least one profile is marked as active
                    if (!farmProfiles.Any(p => p.LoggedIn) && farmProfiles.Count > 0)
                    {
                        farmProfiles[0].LoggedIn = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading farm profiles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SwitchProfile(UserProfileViewModel profile)
    {
        // Don't switch if already logged in to this profile
        if (profile.LoggedIn)
            return;

        try
        {
            var response = await ApiCall.Add<ApiResponse<UserViewModel>, UserProfileViewModel>(
                await ApiCall.GetHttpClient(), "authentication/switchprofile", profile);

            if (response?.Status == (int)HttpStatusCode.OK && response.Result != null)
            {
                // Update token
                if (!string.IsNullOrEmpty(response.Result.Token))
                {
                    await LocalStorageService.SetItemAsync("token", response.Result.Token);
                    
                    // Update auth state provider
                    if (authProvider != null)
                    {
                        authProvider.SetAuthInfo(response.Result);
                        
                        // Refresh the UI
                        StateHasChanged();
                        
                        // Refresh the current page to apply new permissions
                        NavigationManager.NavigateTo(NavigationManager.Uri, true);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error switching profile: {ex.Message}");
        }
    }
    
    private string FormatRoleName(string role)
    {
        if (string.IsNullOrEmpty(role))
            return string.Empty;
            
        // Transform camelCase or PascalCase to readable format
        if (role == "SystemAdministrator")
            return "SysAdmin";
            
        if (role == "Administrator")
            return "Admin";
            
        if (role == "FarmManager")
            return "Manager";
            
        if (role == "FieldOfficer")
            return "Officer";
            
        return role;
    }

    public async Task RefreshProfiles()
    {
        await LoadProfiles();
        StateHasChanged();
    }
}

<style>
    .farm-profile-switcher {
        max-height: 200px;
        overflow-y: auto;
    }
    
    .farm-profile-switcher.loading {
        min-height: 40px;
    }
    
    .profiles-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }
    
    .profile-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 8px 12px;
        border-radius: 6px;
        background-color: rgba(255, 255, 255, 0.1);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .profile-item:hover {
        background-color: rgba(255, 255, 255, 0.15);
    }
    
    .profile-item.active {
        background-color: rgba(255, 255, 255, 0.2);
        border-left: 3px solid #5e72e4;
    }
    
    .profile-info {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }
    
    .farm-name {
        font-size: 0.8rem;
        font-weight: 500;
        color: #fff;
    }
    
    .role-badge {
        font-size: 0.65rem;
    }
    
    .badge.role-SystemAdministrator {
        background-color: #dc3545;
    }
    
    .badge.role-Administrator {
        background-color: #fd7e14;
    }
    
    .badge.role-FarmManager {
        background-color: #20c997;
    }
    
    .badge.role-FieldOfficer {
        background-color: #0dcaf0;
    }
    
    .badge.role-Viewer {
        background-color: #6c757d;
    }
    
    .active-indicator {
        color: #2dce89;
        font-size: 0.8rem;
    }
</style>