@namespace Hurudza.UI.Web.Components
@using Hurudza.Common.Utils.Extensions
@using Hurudza.UI.Web.Services
@inherits ComponentBase

@if (ShouldRender)
{
    @ChildContent
}
else if (ElseContent != null)
{
    @ElseContent
}

@code {
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; }
    [Inject] private FarmAccessService FarmAccessService { get; set; }
    
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public RenderFragment ElseContent { get; set; }
    
    // Permission parameters
    [Parameter] public string Permission { get; set; }
    [Parameter] public string[] AnyPermission { get; set; }
    [Parameter] public string[] AllPermissions { get; set; }
    
    // Farm-specific parameters
    [Parameter] public string FarmId { get; set; }
    [Parameter] public bool RequireManage { get; set; }
    [Parameter] public bool RequireFieldManagement { get; set; }
    [Parameter] public bool RequireCropManagement { get; set; }
    
    // Role-specific shortcuts
    [Parameter] public bool RequireAdmin { get; set; }
    [Parameter] public bool RequireSystemAdmin { get; set; }

    private bool ShouldRender { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckPermissions();
    }

    protected override async Task OnParametersSetAsync()
    {
        await CheckPermissions();
    }

    private async Task CheckPermissions()
    {
        // Start with false
        ShouldRender = false;
        
        // Get auth state
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        // If not authenticated, deny access immediately
        if (!user.Identity.IsAuthenticated)
            return;
            
        // System admin check takes precedence
        if (RequireSystemAdmin)
        {
            ShouldRender = user.IsSystemAdmin();
            return;
        }
        
        // Admin check if specified
        if (RequireAdmin && !user.IsAdministrator())
        {
            return;
        }
        
        // Farm access checks
        if (!string.IsNullOrEmpty(FarmId))
        {
            // First check basic access to farm
            var canAccess = await FarmAccessService.CanAccessFarm(FarmId);
            if (!canAccess)
                return;
                
            // Specific farm management right checks
            if (RequireManage)
            {
                var canManage = await FarmAccessService.CanManageFarm(FarmId);
                if (!canManage)
                    return;
            }
            
            if (RequireFieldManagement)
            {
                var canManageFields = await FarmAccessService.CanManageFields(FarmId);
                if (!canManageFields)
                    return;
            }
            
            if (RequireCropManagement)
            {
                var canManageCrops = await FarmAccessService.CanManageCrops(FarmId);
                if (!canManageCrops)
                    return;
            }
        }
        
        // If we've passed all the farm and role checks, and no specific permissions are required,
        // then we can allow access
        if (string.IsNullOrEmpty(Permission) && 
            (AnyPermission == null || AnyPermission.Length == 0) &&
            (AllPermissions == null || AllPermissions.Length == 0))
        {
            ShouldRender = true;
            return;
        }
        
        // Check specific permissions
        if (!string.IsNullOrEmpty(Permission))
        {
            ShouldRender = await FarmAccessService.HasPermission(Permission);
        }
        else if (AnyPermission != null && AnyPermission.Length > 0)
        {
            ShouldRender = await FarmAccessService.HasAnyPermission(AnyPermission);
        }
        else if (AllPermissions != null && AllPermissions.Length > 0)
        {
            ShouldRender = await FarmAccessService.HasAllPermissions(AllPermissions);
        }
    }
}